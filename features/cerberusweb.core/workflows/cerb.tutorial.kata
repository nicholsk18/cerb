records:
  workspace_page/page_tutorial:
    fields:
      name: Tutorial
      extension_id: core.workspace.page.workspace
      owner__context: cerberusweb.contexts.app
      owner_id@int: 0
  workspace_tab/tab_welcome:
    fields:
      name: Welcome
      page_id: {{records.page_tutorial.id}}
      extension_id: core.workspace.tab.dashboard
      pos@int: 1
      params:
        layout@text:
        prompts_kata@text:
      options_kata@raw: locked@bool: yes
  workspace_widget/widget_welcome_what_is_cerb:
    fields:
      label: What is Cerb?
      tab_id: {{records.tab_welcome.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 1
      width_units@int: 2
      zone: content
      params:
        data_query@text:
          type:sample.records
          records:(help:())
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@text:
          layout:
            style: fieldsets
            headings@bool: no
            paging@bool: no
            filtering@bool: no

          columns:
            markdown/text:
              params:
                text_size@raw: 120%
                value@text:
                  **Cerb** is a fully customizable, web-based helpdesk and workflow automation platform. The project has continuously evolved for over 22 years based on the feedback of thousands of teams around the world in almost every industry. It is used by everyone from solo founders to 1,000+ person teams managing millions of customer requests.

                  Cerb integrates with any API-based service. It can automate nearly any repetitive digital workflow with its specialized KATA language and browser-based coding tools.

                  Teams and individuals can build a personalized "mission control" using a wide array of configurable widgets to stay focused on their most important tasks.

                  Custom records and fields organize of any kind of team data (email, calls, social media, orders, survey responses, todo, etc). Pre-built solutions are easily shared within the community.

                  The most common use case is converting standard POP3/IMAP mailboxes like Gmail or O365 (e.g. support@, team@) into high-volume team-based webmail with automated triage, internal discussions with @mentions, built-in productivity tools, custom actions, reporting, and a shared history.

                  An emerging use case is integrating with large language models (LLMs) to automatically suggest answers to customer requests based on existing team knowledge (documentation, FAQs, articles).

                  You can run Cerb on your own hardware, in Docker, or in Cerb Cloud as a fully managed service.

                  We share 100% of our source code on GitHub. Cerb is free to use for a single seat (no license required). This allows you to maintain an archive of your historical data on the latest version in perpetuity at no ongoing cost. Your data is always yours.
        toolbar_kata@text:
  workspace_widget/widget_welcome_ui:
    fields:
      label: User Interface Tour
      tab_id: {{records.tab_welcome.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 2
      width_units@int: 2
      zone: content
      params:
        data_query@text:
          type:sample.records
          records:(help:())
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@raw:
          layout:
            style: fieldsets
            headings@bool: no
            paging@bool: no
            filtering@bool: no

          columns:
            toolbar/calloutSearch:
              params:
                kata:
                  interaction/calloutLogo:
                    icon: riflescope
                    label: Logo
                    uri: cerb:automation:cerb.interaction.echo
                    after:
                      refresh_widgets@bool: no
                    inputs:
                      outputs:
                        callout:
                          selector: #cerb-logo
                          message: Click the logo as a shortcut to your default page.
                          my: middle top
                          at: middle bottom
                  interaction/calloutNavbar:
                    icon: riflescope
                    label: Navigation bar
                    uri: cerb:automation:cerb.interaction.echo
                    after:
                      refresh_widgets@bool: no
                    inputs:
                      outputs:
                        callout:
                          selector: body > ul.navmenu.cerb-no-print.ui-sortable > li.add
                          message: The navigation bar is located at the top of your browser window. It displays a list of shortcuts to workspace pages. You can add and remove shortcuts here, and drag them to rearrange their order.
                          my: middle bottom
                          at: middle top
                  interaction/calloutWorkerMenu:
                    icon: riflescope
                    label: Worker menu
                    uri: cerb:automation:cerb.interaction.echo
                    after:
                      refresh_widgets@bool: no
                    inputs:
                      outputs:
                        callout:
                          selector: #lnkSignedIn
                          message: Clicking your name provides a menu with useful shortcuts; including "log out".
                          my: right bottom
                          at: middle top-10
                  interaction/calloutDarkLight:
                    icon: riflescope
                    label: Dark/Light mode
                    uri: cerb:automation:cerb.interaction.echo
                    after:
                      refresh_widgets@bool: no
                    inputs:
                      outputs:
                        callout:
                          selector: #cerb-theme
                          message: Click this button to toggle between light and dark mode.
                          my: right+10 top+5
                          at: middle bottom
                  interaction/calloutSearchMenu:
                    icon: riflescope
                    label: Search menu
                    uri: cerb:automation:cerb.interaction.echo
                    after:
                      refresh_widgets@bool: no
                    inputs:
                      outputs:
                        callout:
                          selector: .tour-navmenu-search
                          message: Use this menu to search for any kind of record from anywhere.
                          my: right+20 top+5
                          at: left bottom
                  interaction/calloutSetup:
                    icon: riflescope
                    label: Setup
                    uri: cerb:automation:cerb.interaction.echo
                    hidden@raw,bool: {{not cerb_current_worker().is_superuser}}
                    after:
                      refresh_widgets@bool: no
                    inputs:
                      outputs:
                        callout:
                          selector: .tour-navmenu-setup
                          message: This is the configuration page for administrators.
                          my: right+20 top+5
                          at: left bottom
                  interaction/calloutWorkspaceMenu:
                    icon: riflescope
                    label: Workspace menu
                    uri: cerb:automation:cerb.interaction.echo
                    after:
                      refresh_widgets@bool: no
                    inputs:
                      outputs:
                        callout:
                          selector: form[id^=frmWorkspacePage] button.add
                          message: Add or remove the current workspace page in your navbar.
                          my: right+30 top+5
                          at: left bottom
                  interaction/calloutWorkspaceTabs:
                    icon: riflescope
                    label: Workspace tabs
                    uri: cerb:automation:cerb.interaction.echo
                    after:
                      refresh_widgets@bool: no
                    inputs:
                      outputs:
                        callout:
                          selector: div[id^=pageTabs]
                          message: Workspace pages are organized into tabs.
                          my: middle bottom
                          at: middle top
        toolbar_kata@text:
  workspace_tab/tab_records:
    fields:
      name: Records
      page_id: {{records.page_tutorial.id}}
      extension_id: core.workspace.tab.dashboard
      pos@int: 2
      params:
        layout@text:
        prompts_kata@text:
      options_kata@raw: locked@bool: yes
  workspace_widget/widget_records:
    fields:
      label: Records
      tab_id: {{records.tab_records.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 1
      width_units@int: 2
      zone: content
      params:
        data_query@text:
          type:sample.records
          records:(help:())
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@text:
          layout:
            style: fieldsets
            headings@bool: no
            paging@bool: no
            filtering@bool: no

          columns:
            icon/splash:
              params:
                svg:
                  data: <svg xmlns="http://www.w3.org/2000/svg" width="800" viewBox="0 0 1299 706"><g id="Layer_1-2" data-name="Layer_1"><path d="M0 0h1299v706H0z" style="fill:#d0d2d3"/><circle cx="573.93" cy="131.33" r="54.37" style="fill:#9ad2f2;opacity:.35"/><path d="m371.62 129.64-5.95 32.18 29.74 7.71 3.57 42.46 36.88 3.86-9.52-60.48-54.72-25.73zM524.87 351.27c.17-2.67.29-5.36.29-8.09 0-68.91-57.73-124.77-128.94-124.77s-128.96 55.87-128.96 124.77c0 2.42.08 4.82.22 7.18a93.494 93.494 0 0 0-1.65 17.38v79.13c0 38.68 23.06 70.02 51.51 70.02h157.52c28.45 0 51.51-31.34 51.51-70.02v-79.13c0-5.69-.55-11.17-1.49-16.47ZM362.63 129.64l-62.86-6.33c-11.06-20.77-32.3-34.84-56.71-34.84-35.81 0-64.85 30.24-64.85 67.56 0 5.87.8 11.52 2.15 16.96 2.58-17.3 16.74-30.57 33.85-30.57 18.96 0 34.31 16.22 34.31 36.24s-15.36 36.22-34.31 36.22c-1.06 0-2.11-.07-3.15-.15 9.45 5.58 20.35 8.83 32 8.83 35.35 0 64.03-29.47 64.78-66.12l51.21 1.8 3.58-29.6ZM594.38 131.71c0 10.31-8.67 18.66-19.37 18.66s-19.37-8.34-19.37-18.66 8.68-18.66 19.37-18.66 19.37 8.36 19.37 18.66Z" style="fill:#333"/><path d="m558.85 144.99-91.61 86.21 22.6 18 73.77-100.33" style="fill:#333"/><path d="M277.46 353.12h237.62v40.27H277.46z" style="fill:#2aa7df"/><path d="M490.73 290.66c-3.6 7.35-26 2.15-50.04-11.64-24.04-13.76-40.63-30.88-37.03-38.22 3.6-7.34 26.01-2.11 50.05 11.65 24.05 13.77 40.63 30.87 37.03 38.21Z" style="fill:#525252"/><path d="M387.84 574.07c0 17.78-10.58 32.18-23.6 32.18h-67.76c-13.03 0-23.59-14.4-23.59-32.18 0-17.75 10.56-32.16 23.59-32.16l79.39-5.78c13.03 0 11.96 20.19 11.96 37.94ZM411.24 574.07c0 17.78 10.56 32.18 23.59 32.18h67.76c13.04 0 23.6-14.4 23.6-32.18 0-17.75-10.56-32.16-23.6-32.16l-79.7-5.78c-13.03 0-11.65 20.19-11.65 37.94Z" style="fill:#333"/><path d="M443.92 352.93h50.85v40.85h-50.85z" style="fill:#f7b118"/><circle cx="479.99" cy="366.09" r="11.04" style="fill:#fffad5"/><path d="m265.23 332.25-54.66 4.9c-11.15-20.43-32.18-34.24-56.36-34.24-35.8 0-64.83 30.25-64.83 67.56 0 5.87.8 11.54 2.16 16.98 2.58-17.32 16.73-30.58 33.84-30.58 18.94 0 34.31 16.23 34.31 36.24s-15.37 36.23-34.31 36.23c-1.06 0-2.11-.07-3.14-.15 9.44 5.58 20.34 8.83 31.98 8.83 35.56 0 64.39-29.81 64.81-66.73l43.83-3.02 2.39-36.01ZM637.92 306.97c-23.49 0-43.99 13.07-55.37 32.54l-55.23.35 7.14 32.16 38.67 1.62c0 .29-.05.59-.05.89 0 37.29 29.04 67.55 64.85 67.55 11.65 0 22.54-3.25 32-8.85-1.04.1-2.09.18-3.15.18-18.95 0-34.32-16.22-34.32-36.23s15.37-36.23 34.32-36.23c17.11 0 31.26 13.25 33.85 30.56 1.34-5.44 2.13-11.1 2.13-16.97 0-37.31-29.03-67.56-64.83-67.56Z" style="fill:#333"/><path d="m182.18 117.68 50.56 71.94 53.09 68.83-76.25 45.68-50.91-72.43-46.59-57.78 70.1-56.24z" style="fill:#008752"/><path d="m184.18 137.36 38.8 54.39 40.83 52.09-60.51 34.33-39.06-54.78-35.84-43.72 55.78-42.31zM245.96 269.73c0 3.57-2.94 6.45-6.58 6.45s-6.6-2.89-6.6-6.45 2.94-6.42 6.6-6.42 6.58 2.88 6.58 6.42Z" style="fill:#54b648"/><path d="m190.5 129.54-8.58-11.86L113 174.19l13.36 6.36" style="fill:#008752"/><path d="m244.05 431.94-87.78 11.82c-.39.05-.76-.14-.9-.51-2.69-7.14-28.6-76.06-32.9-87.49-.25-.66-1.14-.73-1.52-.12l-54.97 89.18c-.24.39-.13.9.25 1.16l116.76 77.96 1.77 1.18c.4.26.93.15 1.19-.25l58.92-91.64a.857.857 0 0 0-.83-1.31Z" style="fill:#127692"/><path d="m155.55 443.56-89.31 2.42 118.53 79.15-29.22-81.57z" style="fill:#115e70"/><path d="m244.87 431.3-121.79-76.85c-.71-.45-1.58.29-1.24 1.06l31.09 93.3c.14.32.7.11 1.05.09l90.46-16.03c.83-.04 1.12-1.13.42-1.57Z" style="fill:#54a1d8"/><path d="M694.18 221.05h30.51V438.6h-30.51z" style="fill:#404041" transform="rotate(37.36 709.454 329.846)"/><path d="m793.413 193.061 25.92 19.788-34.043 44.59-25.92-19.788z" style="fill:#f1f1f2"/><path d="m827.83 254.73 7.81 20.68 21.47 5.29-17.25 13.82 1.6 22.04-18.48-12.13-20.47 8.34 5.84-21.33-14.26-16.89 22.08-1.04 11.66-18.78zM750.13 130.31l8.5 23.75 23.6 5.97-19.06 15.98 1.66 25.35-20.28-13.87-22.57 9.69 6.53-24.55-15.61-19.36 24.31-1.3 12.92-21.66zM778.79 297.45l6.07 13.31 16.14 3.61-12.78 8.65 1.44 14.11-13.96-7.96-15.25 5.11 4.14-13.57-10.86-10.95 16.53-.43 8.53-11.88z" style="fill:#ffde46"/><rect width="261.59" height="143.4" x="858.15" y="466.31" style="fill:#f1f1f2" rx="12" ry="12" transform="rotate(-9.24 989.271 538.122)"/><rect width="128.24" height="20.63" x="963.06" y="494.08" style="fill:#929497" rx="4.91" ry="4.91" transform="rotate(-9.24 1027.546 504.533)"/><rect width="128.24" height="20.63" x="967.79" y="523.09" style="fill:#a6a8ab" rx="4.91" ry="4.91" transform="rotate(-9.24 1032.238 533.56)"/><rect width="108.09" height="20.63" x="972.64" y="553.72" style="fill:#a6a8ab" rx="4.91" ry="4.91" transform="rotate(-9.24 1027.02 564.215)"/><path d="M845.93 444.89h262.52v41.24H845.93z" style="fill:#009345" transform="rotate(-9.24 977.506 465.614)"/><rect width="94.2" height="20.63" x="863.89" y="467.98" rx="4.91" ry="4.91" style="fill:#8bc53f" transform="rotate(-9.24 911.264 478.446)"/><path d="m880.01 523.114 68.282-11.109 11.108 68.283-68.282 11.108z" style="fill:#a6a8ab"/><path d="m911.85 528.89-.08 3.42 3.2.3 1.08 4.32 3.87-.23-2-6.07-6.07-1.74zM933.14 549.61c-.03-.28-.06-.57-.11-.85-1.17-7.22-7.9-12.13-15.02-10.98-7.12 1.16-11.94 7.95-10.77 15.17.04.25.09.5.14.75-.01.6.03 1.22.13 1.85l1.35 8.29c.66 4.05 3.5 6.96 6.34 6.5l15.75-2.56c2.84-.46 4.62-4.12 3.96-8.17l-1.35-8.29c-.1-.6-.25-1.16-.43-1.7ZM907.16 555.13l-5.18 1.33c-1.39-1.79-3.63-2.79-5.95-2.41-3.44.56-5.76 3.92-5.18 7.51.09.56.26 1.1.47 1.6-.02-1.71 1.92-4.04 3.57-4.3 1.82-.3 3.35 1.11 3.66 3.03.31 1.92-1.5 4.47-3.32 4.77-.1.02-.2.03-.3.03.99.39 2.09.53 3.21.35 3.42-.56 5.72-3.87 5.19-7.43l4.17-.98-.33-3.5ZM944.18 541.98c-2.47.4-4.4 2.1-5.26 4.3l-5.79.98 1.29 3.2 4.09-.49v.09c.63 3.85 4.18 6.48 7.94 5.87 1.22-.2 2.31-.72 3.21-1.46-.11.03-.22.05-.33.07-1.99.32-3.87-1.09-4.21-3.15-.34-2.07 1-4 2.99-4.33 1.8-.29 3.5.83 4.07 2.58.05-.58.04-1.18-.06-1.79-.63-3.85-4.18-6.48-7.94-5.87ZM910.92 529.04l-6.59.4c-1.49-1.96-3.92-3.05-6.43-2.64-3.69.6-6.18 4.21-5.55 8.06.1.61.28 1.17.51 1.71-.02-1.83 1.21-3.43 2.98-3.72 1.96-.32 3.81 1.1 4.15 3.16s-.98 3.99-2.93 4.31c-.11.02-.22.03-.33.04 1.07.42 2.25.57 3.45.37 3.65-.59 6.11-4.11 5.57-7.91l5.31-.67-.13-3.11ZM936.8 524.6c.21 1.29-.56 2.48-1.73 2.67s-2.28-.7-2.49-1.98.57-2.48 1.73-2.67 2.28.7 2.49 1.99Z" style="fill:#333"/><path d="m932.99 527.32-8.32 10.84 2.74 1.54 6.16-12.05" style="fill:#333"/><path d="m952.9 550.82-6.57 2.47-4.49-5.93-2.3 7.63 10.81 3.72 2.55-7.89z" style="fill:#656565"/><path d="m952.97 550.6-10.95-3.43 4.13 6.25 6.82-2.82z" style="fill:#bbbdbf"/><path d="M908.64 552.29h24.07v3.63h-24.07z" style="fill:#b3b3b3" transform="rotate(-9.24 920.955 554.274)"/><path d="M926.23 550.97h5.07v3.63h-5.07z" style="fill:#808184" transform="rotate(-9.24 929.096 552.939)"/><path d="M928.73 544.04c-.23.85-2.56.65-5.21-.44s-4.6-2.67-4.37-3.52c.23-.85 2.56-.65 5.21.44s4.6 2.67 4.37 3.52Z" style="fill:#525252"/><path d="m894.75 558.37 5.95 6.09 6.15 5.75-6.58 5.55-5.99-6.13-5.35-4.8 5.82-6.46z" style="fill:#5d5d5d"/><path d="m895.14 560.31 4.56 4.59 4.71 4.34-5.25 4.23-4.58-4.63-4.11-3.62 4.67-4.91zM903.28 571.9c.06.34-.18.66-.53.72s-.68-.17-.73-.51.18-.66.53-.72.67.17.73.51Z" style="fill:#aeaeae"/><path d="M929.39 550.82h1.46v1.73h-1.46z" style="fill:#fff" transform="rotate(-9.24 930.429 551.863)"/><path d="m886.14 540.13 2.69 7.95 13.46-6.24-4.54-7.76-6.46 3.3-5.15 2.75z" style="fill:#bbbdbf"/><path d="m885.98 539.83-.89-2.05 5.62-2.36 2.44 1-7.17 3.41z" style="fill:#929497"/><path d="M923 575.64c.29 1.76-.72 3.38-2.25 3.63l-7.94 1.29c-1.53.25-3-.97-3.28-2.73-.29-1.75.72-3.38 2.25-3.62l9.14-2.63c1.53-.25 1.8 2.31 2.08 4.06ZM925.83 575.18c.29 1.76 1.66 2.99 3.08 2.76l7.36-1.2c1.42-.23 2.33-1.84 2.05-3.59-.29-1.75-1.66-2.99-3.08-2.76l-8.82.3c-1.42.23-.87 2.74-.58 4.49Z" style="fill:#333"/><rect width="261.59" height="143.4" x="888.33" y="299.44" style="fill:#f1f1f2" rx="12" ry="12" transform="rotate(9.91 1018.669 370.891)"/><rect width="128.24" height="20.63" x="1002.16" y="341.62" style="fill:#929497" rx="4.91" ry="4.91" transform="rotate(9.91 1065.756 351.701)"/><rect width="128.24" height="20.63" x="997.1" y="370.58" style="fill:#a6a8ab" rx="4.91" ry="4.91" transform="rotate(9.91 1060.713 380.668)"/><rect width="108.09" height="20.63" x="992.2" y="397.8" style="fill:#a6a8ab" rx="4.91" ry="4.91" transform="rotate(9.91 1045.757 407.88)"/><path d="M900.55 278.18h262.52v41.24H900.55z" style="fill:#7f3f97" transform="rotate(9.91 1031.287 298.618)"/><rect width="94.2" height="20.63" x="917.97" y="278.85" rx="4.91" ry="4.91" style="fill:#ddbbd9" transform="rotate(9.91 964.62 289)"/><path d="m906.17 389.606 12.492-71.497 71.497 12.49-12.491 71.498z" style="fill:#bbbdbf"/><path d="m918.5 391.85 18.02-54.74 22.05-9.22 10.08 16.5-4.05 55.56-46.1-8.1z" style="fill:#58595b"/><path d="m919.88 391.94 1.41-3.48 24.61-6.09-1.02 5.75-20.35 4.63 6.53 1.14 13.06-2.99-.91 5.11 3.03.53 12.27-68.86-21.98 9.42-19.31 54.37 2.66.46Zm17.61-53.7 18.81-7.1-1.02 5.75-19.72 6.94 1.92-5.59Zm-2.56 8.4 19.66-6.95-1.02 5.75-20.61 6.78 1.97-5.58Zm-2.61 8.38 20.56-6.79-1.02 5.75-21.56 6.62 2.02-5.57Zm-4.02 8.79 21.5-6.63.33 5.33-22.55 6.45.72-5.15Zm-1.38 7.95 22.49-6.46-1.02 5.75-23.59 6.27 2.12-5.56Zm-2.79 8.36 23.52-6.28-1.02 5.75-24.68 6.07 2.18-5.55Z" style="fill:#929497"/><path d="m948.21 397.09.87-4.35 5.19 5.41 4.37.76-9.31-9.48 1.05-5.3 13 14.18-.1 1.42 1.32.23 4.05-55.56-10.09-16.5-12.26 68.86 1.91.33Zm15.39-2.47-12.94-13.81 1.05-5.3 12.28 14.05-.39 5.06Zm.62-8.73-12.23-13.68 1.04-5.3 11.6 13.93-.41 5.05Zm.66-8.73-11.56-13.56 1.04-5.3 10.95 13.82-.44 5.05Zm1.45-17.43-10.3-13.35 1.03-5.31 9.75 13.61-.48 5.04Zm-7.92-27.25 9.19 13.51-.49 5.04-9.72-13.24 1.02-5.31Zm7.18 35.96-10.91-13.45 1.03-5.3 10.34 13.71-.46 5.04Z" style="fill:#7a7c7f"/><rect width="261.59" height="143.4" x="867.12" y="108.73" style="fill:#f1f1f2" rx="12" ry="12" transform="rotate(2.84 997.264 180.337)"/><rect width="128.24" height="20.63" x="978.22" y="145.25" style="fill:#929497" rx="4.91" ry="4.91" transform="rotate(2.84 1041.654 155.42)"/><rect width="128.24" height="20.63" x="976.77" y="174.61" style="fill:#a6a8ab" rx="4.91" ry="4.91" transform="rotate(2.84 1040.16 184.723)"/><rect width="108.09" height="20.63" x="975.32" y="203.47" style="fill:#a6a8ab" rx="4.91" ry="4.91" transform="rotate(2.84 1028.566 213.67)"/><path d="M870.33 86.46h262.52v41.24H870.33z" style="fill:#456bb2" transform="rotate(2.84 1000.895 106.983)"/><path d="m885.175 216.874 3.71-74.808 71.473 3.546-3.711 74.808z" style="fill:#bbbdbf"/><path d="m939.34 216.22-37.53-1.86s12.27-13.83 12.4-16.62c.14-2.79-2.83-10.94-2.83-10.94l23.4 1.16s-3.63 8.32-3.77 11.07c-.15 2.83 8.31 17.19 8.31 17.19Z" style="fill:#8a8c8f"/><path d="M940.13 178.94c-.47 9.55-5.95 18.6-12.92 20.26-1.1.26-2.48 1.48-3.64 1.42-1.61-.08-2.89-1.59-4.32-2.26-6.11-2.86-10.3-11.99-9.86-20.95.55-11.06 10.66-20.26 19.15-19.84 8.49.42 12.14 10.3 11.59 21.36Z" style="fill:#929497"/><path d="m909.86 205.17 9.85 5.44 3.01 4.38 3.11-4.08 11.4-4.1s11.76 2.24 14.24 5.89c.96 1.41 2.18 8.1 2.18 8.1l-66.35-3.86s1.65-4.38 2.63-5.29c4.21-3.95 19.92-6.48 19.92-6.48Z" style="fill:#5e5e5e"/><path d="M905.98 194.92s.14 1.35.29 1.78c1.16 3.4-.03 11.57-3.16 13.35-1.07.6-3.79-.46-4.74-1.22-1.43-1.15-3.35-6.53-3.35-6.53s.58 5.66 1.48 7.28c.79 1.42 3.16 4.03 4.72 4.47 1.89.54 6.03-.58 7.71-1.6 1.48-.9 3.92-3.56 4.64-5.14 1.12-2.48 1.83-8.16 1.24-10.82-.44-1.98-2.8-5.75-2.44-7.75.35-1.95 3.58-4.73 4.83-6.26 2.14-2.6 6.52-7.72 8.84-10.16 1.24-1.3 3.89-3.74 5.19-4.97 1.29-1.22 3.42-3.85 5.14-3.45 1.02.23 1.55 2.51 1.55 2.51l1.15 8.11s.43 5 .24 6.65c-.23 1.97-1.19 5.89-2.08 7.67-.74 1.5-4.08 5.31-4.08 5.31s-2.48 3.02-2.9 4.24c-.89 2.62-.5 8.45.44 11.05.63 1.74 2.9 4.96 4.51 5.88 1.54.88 5.24 1.16 7.01 1.05 1-.06 3.11-.43 3.87-1.08.66-.57 1.43-3.18 1.43-3.18s-1.46 1.48-2.04 1.31c-1.9-.53-4.4-5.36-3.46-7.1l.31-3.38.93-11.61-.92-22.74-1.62-10.11-3.81-5.84-7.47-3.34-5.88-1.14-8.13 1.58-5.76 4.94-4.65 11.08-.44 8.88.46 7.8.63 10.07.3 2.42Z" style="fill:#2f2a2e"/><rect width="94.2" height="20.63" x="887.08" y="95.41" rx="4.91" ry="4.91" style="fill:#74bee9" transform="rotate(2.84 933.45 105.627)"/></g></svg>
            markdown/text:
              params:
                text_size@raw: 120%
                value@text:
                  At the core of Cerb is a **record** management system for organizing your team's data. A record is a distinctly identifiable entity.

                  Two pieces of information are needed to refer to any record:

                  1. The [**record type**](https://cerb.ai/docs/records/types/) (e.g. contact, organization, worker).

                  1. The unique numeric identifier ("**ID**") within that particular record type. Sequential numeric IDs are automatically assigned when a new record is created; but several record types also support user-friendly nicknames.
        toolbar_kata@text:
  workspace_widget/widget_record_types:
    fields:
      label: List of Built-in Record Types
      tab_id: {{records.tab_records.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 2
      width_units@int: 2
      zone: content
      params:
        data_query@text:
          type:record.types
          exclude_custom:yes
          options:[search]
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@text:
          layout:
            style: grid
            headings@bool: no
            paging@bool: yes
            filtering@bool: no

          columns:
            search/label_singular:
              params:
                label_key: label_singular
                context_key: uri
                text_size@raw: 120%
                bold@bool: yes
                underline@bool: no

        toolbar_kata@text:
  workspace_widget/widget_custom_record_types:
    fields:
      label: Custom Record Types
      tab_id: {{records.tab_records.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 3
      width_units@int: 2
      zone: content
      params:
        data_query@text:
          type:sample.records
          records:(help:())
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@text:
          layout:
            style: fieldsets
            headings@bool: no
            paging@bool: no
            filtering@bool: no

          columns:
            markdown/text:
              params:
                text_size@raw: 120%
                value@text:
                  While the built-in [record types](https://cerb.ai/docs/records/types/) cover things that every team has in common, you most likely need to keep track of data that is specific to your team and industry.

                  In these situations, you can easily [create your own record types](https://cerb.ai/guides/records/custom-records/).

                  For instance:

                  * You can link contacts to records for your products, services, licenses, and subscriptions. During support, everyone on your team will know exactly what your relationship is with each contact.

                  * An educational institution can create records for students, instructors, courses, and rooms. Those records can then be linked to assets (like tablets and projectors) and support requests. If an instructor opened a support request about their projector being broken, you'd know exactly what model it is and where to find it on campus.

                  * A company in the transportation industry may frequently refer to physical trucks, planes, and ships; each with a geopositional location.

        toolbar_kata@text:
  workspace_widget/widget_list_of_custom_record_types:
    fields:
      label: List of Custom Record Types
      tab_id: {{records.tab_records.id}}
      extension_id: core.workspace.widget.worklist
      pos@int: 4
      width_units@int: 2
      zone: content
      params:
        context: cerberusweb.contexts.custom_record
        query_required@text:
        query: sort:name
        render_limit: 10
        header_color: #6a87db
        columns@list:
          c_name
          c_uri
          c_updated_at
  workspace_widget/widget_custom_fields:
    fields:
      label: Custom Fields
      tab_id: {{records.tab_records.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 5
      width_units@int: 2
      zone: content
      params:
        data_query@text:
          type:sample.records
          records:(help:())
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@text:
          layout:
            style: fieldsets
            headings@bool: no
            paging@bool: no
            filtering@bool: no

          columns:
            markdown/text:
              params:
                text_size@raw: 120%
                value@text:
                  Each record type has a set of **fields** to describe its attributes. Your `first_name` and `age` are two fields that describe you.

                  **Custom fields** can be added to any [record](https://cerb.ai/docs/records/) [type](https://cerb.ai/docs/records/types/) based on the specific needs of your team.

                  The **type** of a custom field determines what kind of data it stores.

                  Custom fields that are added directly to an existing record type will be visible on every record of that type.
        toolbar_kata@text:
  workspace_widget/widget_custom_field_types:
    fields:
      label: Custom Field Types
      tab_id: {{records.tab_records.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 6
      width_units@int: 2
      zone: content
      params:
        data_query@text:
          type:sample.records
          records:(
            checkbox:(
              name:"Checkbox"
              description:"A yes/no value"
              example:"yes"
            )
            currency:(
              name:"Currency"
              description:"An amount of a specific currency"
              example:"$1234.56 USD"
            )
            date:(
              name:"Date"
              description:"A specific date and time in UTC with seconds precision"
              example:"2002-01-09 04:27:01 UTC"
            )
            decimal:(
              name:"Decimal"
              description:"A floating point number"
              example:"3.1415"
            )
            file:(
              name:"File"
              description:"A link to a single file record"
              example:"logo.png"
            )
            files:(
              name:"Files"
              description:"Links to multiple file records"
              example:"invoice.pdf, contract.pdf"
            )
            latlong:(
              name:"Latitude/Longitude"
              description:"Geospatial coordinates for a point on Earth"
              example:"52.504043, 13.393236"
            )
            list:(
              name:"List"
              description:"A freeform list of text-based options"
              example:"trim-leather, color-silver"
            )
            checkboxes:(
              name:"Multiple Checkboxes"
              description:"Multiple selections from a pre-defined list of options (e.g. phone, email, sms)"
              example:"email, sms"
            )
            number:(
              name:"Number"
              description:"A whole number"
              example:"8080"
            )
            picklist:(
              name:"Picklist"
              description:"A selection from a pre-defined list of options (e.g. red, green, blue)"
              example:"red"
            )
            link:(
              name:"Record Link"
              description:"A link to record ID of a specific type. This creates a reciprocal [search filter](https://cerb.ai/docs/search/) on the target record."
              example:"task:123"
            )
            links:(
              name:"Record Links"
              description:"Multiple links to record IDs of a specific type. This creates a reciprocal [search filters](https://cerb.ai/docs/search/) on the target records."
              example:"task:123, task:456"
            )
            multitext:(
              name:"Text: Multiple Lines"
              description:"Multiple lines of freeform text entry"
              example:"Client agrees to the project changes discussed on 11/Aug conference call"
            )
            _text:(
              name:"Text: Single Line"
              description:"A single line of freeform text entry"
              example:"bank transfer"
            )
            url:(
              name:"URL"
              description:"A hyperlink URL to a web-based resource"
              example:"https://cerb.ai/"
            )
            worker:(
              name:"Worker"
              description:"A single worker record. This creates a reciprocal [search filter](https://cerb.ai/docs/search/) on worker records."
              example:"Kina Halpue"
            )
          )
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@raw:
          layout:
            style: columns
            headings@bool: no
            paging@bool: no
            filtering@bool: no
            title_column: name

          columns:
            text/name:
              params:
                bold@bool: yes
                text_size@raw: 125%
            markdown/description:
            markdown/example:
              params:
                value_template@raw: `{{example}}`
        toolbar_kata@text:
  workspace_widget/widget_list_of_custom_fields:
    fields:
      label: List of Custom Fields
      tab_id: {{records.tab_records.id}}
      extension_id: core.workspace.widget.worklist
      pos@int: 7
      width_units@int: 4
      zone: content
      params:
        context: cerberusweb.contexts.custom_field
        query_required@text:
        query: sort:name subtotal:context
        render_limit: 15
        header_color: #6a87db
        columns@list:
          c_name
          c_context
          c_custom_fieldset_id
          c_type
          c_uri
          c_updated_at
  workspace_widget/widget_custom_fieldsets:
    fields:
      label: Custom Fieldsets
      tab_id: {{records.tab_records.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 8
      width_units@int: 2
      zone: content
      params:
        data_query@text:
          type:sample.records
          records:(help:())
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@text:
          layout:
            style: fieldsets
            headings@bool: no
            paging@bool: no
            filtering@bool: no

          columns:
            markdown/text:
              params:
                text_size@raw: 120%
                value@text:
                  You can group related [custom fields](https://cerb.ai/docs/custom-fields/) together into a **fieldset**. When a fieldset is optionally added to a [record](https://cerb.ai/docs/records/), it includes all of its fields at the same time.

                  For instance, you could add this _"SLA"_ (Service Level Agreement) fieldset to [organization](https://cerb.ai/docs/orgs/) records:

                  | Field | Type | Value
                  |:-|:-|:-
                  | Level | picklist (Standard, Priority, Enterprise) | `Enterprise`
                  | Expires | date | `2025-12-31 23:59:59 UTC`

                  Every time a new ticket is opened, an [automation](https://cerb.ai/docs/automations/) could check the sender's SLA to determine the assignment and due date (but only if that obligation hasn't expired). Bots could also remind a client to renew when their SLA is about to expire.

                  Fieldsets can be used to further subdivide a broad record type into classifications. For instance, asset records could have custom fieldsets for _"Vehicle"_ and _"Computer"_. You could then create a list of only assets that are vehicles based on their color, mileage, passenger capacity, etc.
        toolbar_kata@text:
  workspace_widget/widget_list_of_custom_fieldsets:
    fields:
      label: List of Custom Fieldsets
      tab_id: {{records.tab_records.id}}
      extension_id: core.workspace.widget.worklist
      pos@int: 9
      width_units@int: 2
      zone: content
      params:
        context: cerberusweb.contexts.custom_fieldset
        query_required@text:
        query: sort:name
        render_limit: 10
        header_color: #6a87db
        columns@list:
          c_name
          c_context
          c_updated_at
  workspace_widget/widget_card_popups:
    fields:
      label: Card Popups
      tab_id: {{records.tab_records.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 10
      width_units@int: 2
      zone: content
      params:
        data_query@raw:
          type:sample.records
          records:(help:(worker__context:"worker" worker_id:{{current_worker_id}}))
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@text:
          layout:
            style: fieldsets
            headings@bool: no
            paging@bool: no
            filtering@bool: no

          columns:
            markdown/intro:
              params:
                text_size@raw: 120%
                value@text:
                  A [**card**](https://cerb.ai/docs/cards/) summarizes a particular record in a popup window.

                  Cards allow information to be retrieved and displayed quickly from anywhere in Cerb without leaving the current page. They also provide shortcuts to common functionality for a given record type.

                  Click on the link below to open your worker card:
            card/worker_id:
              params:
                image@bool: yes
                bold@bool: yes
                underline@bool: yes
            markdown/info:
              params:
                text_size@raw: 120%
                value@text:
                  Cards can be moved around your viewport by clicking and dragging on their blue title bar.

                  A card popup can be minimized by clicking on the first icon in the top right of the popup window. This allows quick access to the content behind the popup without losing your progress.

                  Close a card by clicking on the **(x)** icon in the top right of the popup, or pressing the `<ESC>` key.
        toolbar_kata@text:
  workspace_widget/widget_profile_pages:
    fields:
      label: Profile Pages
      tab_id: {{records.tab_records.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 11
      width_units@int: 2
      zone: content
      params:
        data_query@raw:
          type:sample.records
          records:(help:(worker__context:"worker" worker_id:{{current_worker_id}}))
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@text:
          layout:
            style: fieldsets
            headings@bool: no
            paging@bool: no
            filtering@bool: no

          columns:
            markdown/intro:
              params:
                text_size@raw: 120%
                value@text:
                  Every record has a dedicated page called its **profile**. The information on a profile is divided into any number of **tabs**.

                  Profiles are completely customizable. You can add your own tabs, and change or remove any of the default tabs that were created for you.

                  Each profile tab has a _type_ that determines what it displays. New profile tab types can be implemented with [plugins](https://cerb.ai/docs/plugins/).

                  By default, new profile tabs are **dashboards** with customizable **widgets**.
        toolbar_kata@text:
  workspace_widget/widget_watchers:
    fields:
      label: Watchers
      tab_id: {{records.tab_records.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 12
      width_units@int: 2
      zone: content
      params:
        data_query@raw:
          type:sample.records
          records:(help:(worker__context:"worker" worker_id:{{current_worker_id}}))
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@text:
          layout:
            style: fieldsets
            headings@bool: no
            paging@bool: no
            filtering@bool: no

          columns:
            markdown/intro:
              params:
                text_size@raw: 120%
                value@text:
                  A [**watcher**](https://cerb.ai/docs/watchers/) is a [worker](https://cerb.ai/docs/workers/) who has enabled [notifications](https://cerb.ai/docs/notifications/) for all new [activity](https://cerb.ai/docs/activity-log/) on a [record](https://cerb.ai/docs/records/).

                  For example, a manager may be a watcher of all outgoing messages in a specific [group](https://cerb.ai/docs/groups/) to monitor the quality of the responses being sent to [clients](https://cerb.ai/docs/contacts/).

                  A worker who is assigned as a record's **owner** is automatically treated as a watcher for the duration of their ownership.
            toolbar/addWatcher:
              params:
                kata:
                  interaction/current:
                    uri: cerb:automation:cerb.interaction.echo
                    badge: 10
                    label: Watchers
        toolbar_kata@text:
  workspace_widget/widget_notifications:
    fields:
      label: Notifications
      tab_id: {{records.tab_records.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 13
      width_units@int: 2
      zone: content
      params:
        data_query@raw:
          type:sample.records
          records:(help:(worker__context:"worker" worker_id:{{current_worker_id}}))
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@text:
          layout:
            style: fieldsets
            headings@bool: no
            paging@bool: no
            filtering@bool: no
            colors:
              red@csv: #C1281B

          columns:
            markdown/intro:
              params:
                text_size@raw: 120%
                value@text:
                  [**Notifications**](https://cerb.ai/docs/notifications/) keep [watchers](https://cerb.ai/docs/watchers/) informed about recent [activity](https://cerb.ai/docs/activity-log/) on a [record](https://cerb.ai/docs/records/).

                  When a worker has unread notifications, a red badge is displayed in the top right of every page:

                  Clicking on the notification badge opens a notifications [worklist](https://cerb.ai/docs/worklists/):

                  The links in the worklist open up [cards](https://cerb.ai/docs/cards/) for those relevant records. In many cases, a worker doesn't even need to leave the popup to act on their latest notifications.

                  The summary on a card displays all the unread notifications on that record at the same time.  The notifications are automatically marked as read and the underlying worklist is refreshed.
        toolbar_kata@text:
  workspace_tab/tab_worklists:
    fields:
      name: Worklists
      page_id: {{records.page_tutorial.id}}
      extension_id: core.workspace.tab.dashboard
      pos@int: 3
      params:
        layout@text:
        prompts_kata@text:
      options_kata@raw: locked@bool: yes
  workspace_widget/widget_worklists:
    fields:
      label: Worklists
      tab_id: {{records.tab_worklists.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 1
      width_units@int: 2
      zone: content
      params:
        data_query@text:
          type:sample.records
          records:(help:())
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@text:
          layout:
            style: fieldsets
            headings@bool: no
            paging@bool: no
            filtering@bool: no

          columns:
            markdown/text:
              params:
                text_size@raw: 120%
                value@text:
                  A [**worklist**](https://cerb.ai/docs/worklists/) is a [searchable](#search), [pageable](#pagination), [sortable](#sorting), and customizable set of [records](/docs/records/) displayed using rows and columns.

                  Each row of a worklist is a matching record, and each column is a particular [field](/docs/records/fields/) from that record. The displayed columns can be customized for each worklist based on your needs.

                  By saving a worklist, you'll always have an up-to-date view of matching records without wasting any time searching.

                  For instance, a worklist can display new customer messages that need a response, client organizations in a specific industry, tasks that are overdue, etc.

        toolbar_kata@text:
  workspace_widget/widget_worklist_actions:
    fields:
      label: Worklist Actions
      tab_id: {{records.tab_worklists.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 2
      width_units@int: 2
      zone: content
      params:
        data_query@text:
          type:sample.records
          records:(
            peek:(
              name:" " icon:"new-window-alt" description:"When hovering over a worklist row, this icon will open the record's card popup"
            )
            add:(
              name:" " icon:"circle-plus" description:"Add a new record to the worklist"
            )
            search:(
              name:" " icon:"search" description:"Filter the worklist with a search query"
            )
            config:(
              name:" " icon:"cogwheel" description:"Configure the worklist"
            )
            subtotals:(
              name:" " icon:"signal" description:"Toggle the subtotals sidebar"
            )
            import:(
              name:" " icon:"file-import" description:"Import records into the worklist from a CSV file"
            )
            export:(
              name:" " icon:"file-export" description:"Export records from the worklist to CSV, XML, JSON, JSONL"
            )
            duplicate:(
              name:" " icon:"duplicate" description:"Duplicate the worklist"
            )
            jump:(
              name:" " icon:"down-arrow" description:"Jump to the actions at the bottom of the worklist"
            )
            refresh:(
              name:" " icon:"refresh" description:"Refresh the worklist"
            )
            checkall:(
              name:" " icon:"unchecked" description:"Toggle selection of all records on the current page"
            )
            explore:(
              name:"explore" icon:"compass" description:"View each record profile page fullscreen with next/prev and a sharable link"
            )
            bulk:(
              name:"bulk update" icon:"folder-closed" description:"Update field values on multiple selected records at once"
            )
          )
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@text:
          layout:
            style: table
            headings@bool: no
            paging@bool: no
            filtering@bool: no

          columns:
            text/name:
              params:
                bold@bool: yes
                icon:
                  image_key: icon
            text/description:
        toolbar_kata@text:
  workspace_widget/widget_example_worklist:
    fields:
      label: Example Worklist
      tab_id: {{records.tab_worklists.id}}
      extension_id: core.workspace.widget.worklist
      pos@int: 3
      width_units@int: 4
      zone: content
      params:
        context: cerberusweb.contexts.ticket
        query_required@text:
        query: status:[o,w]
        render_limit: 10
        header_color: #6a87db
        columns@list:
          t_importance
          t_last_wrote_address_id
          t_group_id
          t_bucket_id
          t_owner_id
          t_updated_date
  workspace_tab/tab_search:
    fields:
      name: Search
      page_id: {{records.page_tutorial.id}}
      extension_id: core.workspace.tab.dashboard
      pos@int: 4
      params:
        layout@text:
        prompts_kata@text:
      options_kata@raw: locked@bool: yes
  workspace_widget/widget_search:
    fields:
      label: Search
      tab_id: {{records.tab_search.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 1
      width_units@int: 2
      zone: content
      params:
        data_query@text:
          type:sample.records
          records:(help:())
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@text:
          layout:
            style: fieldsets
            headings@bool: no
            paging@bool: no
            filtering@bool: no

          columns:
            markdown/text:
              params:
                text_size@raw: 120%
                value@text:
                  **Search queries** are a text-based language for filtering [records](https://cerb.ai/docs/records/). They are efficient, expressive, and automation-friendly.

                  Using queries, search functionality is consistent between [automations](https://cerb.ai/docs/automations/), [worklists](https://cerb.ai/docs/worklists/), [data queries](https://cerb.ai/docs/data-queries/), and [API requests](https://cerb.ai/docs/api/endpoints/records/#search).

                  As text, queries can be built dynamically using [automation scripting](https://cerb.ai/docs/scripting/) syntax. They also simplify many complex operations that would otherwise be tedious (or impossible) to automate or represent with web-based forms.

                  A query is a list of **filters** separated by a space. Each filter uses the format:

                  ```cerb
                  filter:expression
                  ```

                  The possible **expressions** depend on the type of filter.

                  Use the global search menu in the top right to search any record type.

                  You can pin your most frequently used record types to the search menu from your profile.
        toolbar_kata@text:
  workspace_widget/widget_search_filter_types:
    fields:
      label: Search Filter Types
      tab_id: {{records.tab_search.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 2
      width_units@int: 2
      zone: content
      params:
        data_query@text:
          type:sample.records
          records:(
            typeText:(type:"Text")
            typeBooleans:(type:"Booleans")
            typeChoosers:(type:"Choosers")
            typeDates:(type:"Dates")
            typeFulltext:(type:"Fulltext")
            typeLinks:(type:"Links")
            typeNullness:(type:"Nullness")
            typeNumbers:(type:"Numbers")
            typeWatchers:(type:"Watchers")
          )
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@raw:
          layout:
            style: columns
            headings@bool: no
            paging@bool: no
            filtering@bool: no
            #title_column: _label

          columns:
            link/type:
              params:
                text_size: 125%
                text_key: type
                href_template@raw: https://cerb.ai/docs/search/#{{type|lower}}
                icon:
                  image: new-window-alt
                  at: end
                bold@bool: yes
                href_new_tab@bool: yes
        toolbar_kata@text:
  workspace_widget/widget_search_query_examples:
    fields:
      label: Search Query Examples
      tab_id: {{records.tab_search.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 3
      width_units@int: 4
      zone: content
      params:
        data_query@raw:
          type:sample.records
          records:(
            workerExact:(
              description:"Exactly match a worker first name"
              record_type:worker
              query:"firstName:\"{{current_worker_first_name}}\""
            )
            workerWildcard:(
              description:"Match a worker first name by wildcard"
              record_type:worker
              query:"firstName:{{current_worker_first_name|slice(0,1)|lower}}*"
            )
            openTickets:(
              description:"Open tickets"
              record_type:ticket
              query:"status:open"
            )
            ticketStatusSet:(
              description:"Open or waiting tickets"
              record_type:ticket
              query:"status:[open,waiting]"
            )
            ticketNegation:(
              description:"All tickets excluding open"
              record_type:ticket
              query:"status:!open"
            )
            ticketFulltextAll:(
              description:"Full-text match all of the words in any order"
              record_type:ticket
              query:"bug bluetooth report"
            )
            ticketFulltextPhrase:(
              description:"Full-text match an exact phrase"
              record_type:ticket
              query:"\"bug report\""
            )
            availTickets:(
              description:"Open tickets assigned to you or unassigned"
              record_type:ticket
              query:"status:o (owner:me OR owner.id:0)"
            )
            createdTickets1yr:(
              description:"Tickets created in the past year by group"
              record_type:ticket
              query:"created:\"-1 year to now\" status:!d subtotal:group.id"
            )
            createdTickets1mo:(
              description:"Tickets created this month"
              record_type:ticket
              query:"created:\"first day of this month\""
            )
            createdTicketsBefore:(
              description:"Tickets older than 1 year"
              record_type:ticket
              query:"created:\"big bang to -1 year\""
            )
            createdTicketsBefore:(
              description:"Tickets created in the past 2 years during the northern summer on a weekday during work hours"
              record_type:ticket
              query:"created:(since:\"-2 years\" until:now months:Jun,Jul,Aug,Sep days:m,tu,w,th,f times:9a-5p)"
            )
            ticketImpBetween:(
              description:"Open tickets with an importance between two values (inclusive)"
              record_type:ticket
              query:"status:o importance:75...100"
            )
            ticketImpGte:(
              description:"Open tickets with an importance greater than or equal to"
              record_type:ticket
              query:"status:o importance:>=75"
            )
            ticketSortDesc:(
              description:"Sort open tickets by descending importance and ascending created order"
              record_type:ticket
              query:"status:o sort:-importance,created"
            )
            ticketNoWatcher:(
              description:"Open tickets with no watchers"
              record_type:ticket
              query:"status:o watchers:none"
            )
            ticketWatcherDeep:(
              description:"Open tickets with a watcher in the Support group"
              record_type:ticket
              query:"status:o watchers:(group:(name:Support))"
            )
            ticketParticipantHostname:(
              description:"Tickets with a participant from a given hostname"
              record_type:ticket
              query:"participant:(host:cerb.ai)"
            )
            ticketOrgCountry:(
              description:"Tickets opened by a contact from an organization in France"
              record_type:ticket
              query:"messages.first:(sender:(org:(country:France)))"
            )
            taskLinks:(
              description:"Tasks linked to open tickets"
              record_type:task
              query:"links.ticket:(status:o)"
            )
            msgsSentWorker1mo:(
              description:"Messages sent in the past month by worker"
              record_type:messages
              query:"isOutgoing:y worker.id:!0 created:\"-1 month\" subtotal:worker.id"
            )
            workerLogins1mo:(
              description:"Worker logins in the past month"
              record_type:activity_log
              query:"activity:worker.logged_in created:\"-1 month\""
            )
            groupsNotS:(
              description:"Groups that don't start with 'S'"
              record_type:group
              query:"name:!S*"
            )
            filesPngJpeg:(
              description:"Attachments that are 'PNGs larger than 100KB' or 'JPEGs smaller than 100KB'"
              record_type:attachment
              query:"(mimetype:image/png size:>100KB) OR (mimetype:image/jpeg size:<100KB)"
            )
          )
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@raw:
          layout:
            style: table
            headings@bool: yes
            paging@bool: no
            filtering@bool: no
            #title_column: description

          columns:
            text/description:
            text/record_type:
            search/query:
              label: Search Query
              params:
                context_template@raw: {{record_type}}
                query_template@raw: {{query}}
        toolbar_kata@text:
  workspace_tab/tab_workers:
    fields:
      name: Workers, Groups & Roles
      page_id: {{records.page_tutorial.id}}
      extension_id: core.workspace.tab.dashboard
      pos@int: 5
      params:
        layout@text:
        prompts_kata@text:
      options_kata@raw: locked@bool: yes
  workspace_widget/widget_workers:
    fields:
      label: Workers
      tab_id: {{records.tab_workers.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 1
      width_units@int: 2
      zone: content
      params:
        data_query@text:
          type:sample.records
          records:(help:())
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@text:
          layout:
            style: fieldsets
            headings@bool: no
            paging@bool: no
            filtering@bool: no

          columns:
            markdown/text:
              params:
                text_size@raw: 120%
                value@text:
                  The people who officially represent your team to the outside world are called **workers**. These are your full-time and part-time staff, interns, volunteers, managers, executives, investors, and partners.

                  Workers log in to Cerb using their standard web browser (e.g. Safari, Firefox, Opera, Edge, Chrome) on desktop computers, laptops, tablets, or smartphones. A single worker can be logged in from multiple devices at the same time.

                  This flexibility allows your team to get work done from almost anywhere.

                  Each worker can be assigned an `@mention` nickname to send them **notifications** about new comments and activity.
        toolbar_kata@text:
  workspace_widget/widget_seats:
    fields:
      label: Seats
      tab_id: {{records.tab_workers.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 2
      width_units@int: 2
      zone: content
      params:
        data_query@text:
          type:sample.records
          records:(example:())
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@text:
          layout:
            style: fieldsets
            headings@bool: no
            paging@bool: no
            filtering@bool: no

          columns:
            markdown/instructions:
              params:
                text_size@raw: 120%
                value@text:
                  Seats determine the maximum number of workers who can use Cerb at the same time.

                  For example, a team of 30 workers who are evenly split into three, non-overlapping shifts (morning, day, night) would only require 10 seats. That’s the highest number of workers who would ever be logged in at the same time.

                  There's no cost per worker account, so there isn't a penalty for inviting everyone to participate: full-time staff, part-time contributors, busy executives, interns, temps, contractors, partners, and volunteers.

                  When the seat count of your subscription is reached, the next worker to log in will "kick" (force log out) the worker with most idle seat. If no workers are idle, the next worker will be temporarily prevented from logging in.
        toolbar_kata@text:
  workspace_widget/widget_list_of_workers:
    fields:
      label: List of Workers
      tab_id: {{records.tab_workers.id}}
      extension_id: core.workspace.widget.worklist
      pos@int: 3
      width_units@int: 4
      zone: content
      params:
        context: cerberusweb.contexts.worker
        query_required@text:
        query: isDisabled:no sort:[firstName,LastName]
        render_limit: 10
        header_color: #6a87db
        columns@list:
          w_title
          a_address_email
          w_is_superuser
          w_at_mention_name
          w_language
          w_timezone
          w_is_mfa_required
  workspace_widget/widget_multi_factor_authentication:
    fields:
      label: Multi-Factor Authentication
      tab_id: {{records.tab_workers.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 4
      width_units@int: 2
      zone: content
      params:
        data_query@text:
          type:sample.records
          records:(example:())
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@text:
          layout:
            style: fieldsets
            headings@bool: no
            paging@bool: no
            filtering@bool: no

          columns:
            markdown/instructions:
              params:
                text_size@raw: 120%
                value@text:
                  When multi-factor authentication (MFA) is enabled for a worker's account, a one-time security code must be verified during logins from new devices. Previously trusted devices may be "remembered" and not require a security code on subsequent logins for a configurable period of time.

                  This combination of "something you know" and "something you have" offers an additional layer of protection against unintentional password disclosure (e.g. phishing, snooping, password stuffing).

                  Cerb generates time-based one-time passwords (TOTP) from any compatible app: 1Password, Authy, etc.

                  [Learn more with the multi-factor auth guide.](https://cerb.ai/guides/security/two-factor-auth/)
        toolbar_kata@text:
  workspace_widget/widget_single_sign_on_sso:
    fields:
      label: Single Sign-On (SSO)
      tab_id: {{records.tab_workers.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 5
      width_units@int: 2
      zone: content
      params:
        data_query@text:
          type:sample.records
          records:(example:())
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@text:
          layout:
            style: fieldsets
            headings@bool: no
            paging@bool: no
            filtering@bool: no

          columns:
            markdown/instructions:
              params:
                text_size@raw: 120%
                value@text:
                  Workers can log in to Cerb using their existing identities at external Identity Providers (IdP) that support OpenID Connect (OIDC) or SAML.

                  This allows you to enforce an organization-wide password policy and require additional authentication factors (e.g. biometrics, security keys).

                  See the following guides for instructions on configuring SSO:
                  * [Authenticate worker single sign-on (SSO) from G Suite using SAML](https://cerb.ai/guides/integrations/google/sso-saml/)
                  * [Authenticate worker single sign-on (SSO) from Microsoft Azure AD using OpenID Connect](https://cerb.ai/guides/integrations/azure/sso-openid/)
                  * [Authenticate worker single sign-on (SSO) from Salesforce using OpenID Connect](https://cerb.ai/guides/integrations/salesforce/sso-openid/)

        toolbar_kata@text:
  workspace_widget/widget_groups:
    fields:
      label: Groups
      tab_id: {{records.tab_workers.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 6
      width_units@int: 2
      zone: content
      params:
        data_query@text:
          type:sample.records
          records:(help:())
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@text:
          layout:
            style: fieldsets
            headings@bool: no
            paging@bool: no
            filtering@bool: no

          columns:
            markdown/text:
              params:
                text_size@raw: 120%
                value@text:
                  Workers with similar skills and duties are organized into **groups**. The workers assigned to a group are its **members**.

                  One or more members of a group may be designated as its **managers**. Managers control the group's roster and assets, and determine how its tasks are organized and assigned.

                  Groups typically reflect existing departments: support, sales, development, marketing, billing, legal, etc. However, groups may alternatively be based on any criteria that suits your needs: division, region, role, product line, and so on.

                  You don't need to figure out which specific person is both responsible for a task and currently available to handle it. Instead, you can quickly route a task to the most appropriate group and move on to your next item. That group can organize their own work so each task gets in front of the right person.

        toolbar_kata@text:
          # interaction/sending:
          #   uri: cerb:automation:ai.cerb.tour
          #   icon: circle-question-mark
          #   label: Sending email
          # interaction/receiving:
          #   uri: cerb:automation:ai.cerb.tour
          #   icon: circle-question-mark
          #   label: Receiving email
  workspace_widget/widget_list_of_groups:
    fields:
      label: List of Groups
      tab_id: {{records.tab_workers.id}}
      extension_id: core.workspace.widget.worklist
      pos@int: 7
      width_units@int: 2
      zone: content
      params:
        context: cerberusweb.contexts.group
        query_required@text:
        query: sort:name
        render_limit: 10
        header_color: #6a87db
        columns@list:
          g_name
          g_reply_address_id
          g_reply_personal
          g_updated
  workspace_widget/widget_roles:
    fields:
      label: Roles
      tab_id: {{records.tab_workers.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 8
      width_units@int: 2
      zone: content
      params:
        data_query@text:
          type:sample.records
          records:(example:())
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@text:
          layout:
            style: fieldsets
            headings@bool: no
            paging@bool: no
            filtering@bool: no

          columns:
            markdown/instructions:
              params:
                text_size@raw: 120%
                value@text:
                  **Workers** generally don't have equal authority in executing their duties. For instance, someone in an entry-level position shouldn't have access to destroy important business records without any oversight.

                  In Cerb, sets of **privileges** are granted to workers using **roles**. For instance, the ability to delete an email conversation or a contact.

                  Multiple roles can be applied to the same worker. A particular privilege is granted to a worker if **any** of their roles permit it.

                  Special workers called **administrators** have no restrictions on their privileges. It is their job to decide which privileges everyone else needs in order to accomplish their jobs.

                  Roles are also used to assign **ownership** of records to arbitrary sets of workers.

                  Each role has three rosters that can be dynamically populated based on worker attributes:

                  * **Membership:** Workers who are granted the privileges of the role.
                  * **Editorship:** Workers who can editor records owned by the role.
                  * **Viewership:** Workers who can view or otherwise utilize records owned by the role.

                  A **Default** role was automatically created for you during installation.  It simply grants all permissions to all workers.  You'll probably want to adjust this depending on your needs. Even if workers are granted all permissions, they still must also be an administrator to enter **Setup** and perform global configuration.

        toolbar_kata@text:
  workspace_widget/widget_list_of_roles:
    fields:
      label: List of Roles
      tab_id: {{records.tab_workers.id}}
      extension_id: core.workspace.widget.worklist
      pos@int: 9
      width_units@int: 2
      zone: content
      params:
        context: cerberusweb.contexts.role
        query_required@text:
        query: sort:name
        render_limit: 10
        header_color: #6a87db
        columns@list:
          w_name
          w_privs_mode
          w_member_query_worker
          w_updated_at
  workspace_tab/tab_clients:
    fields:
      name: Clients
      page_id: {{records.page_tutorial.id}}
      extension_id: core.workspace.tab.dashboard
      pos@int: 6
      params:
        layout@text:
        prompts_kata@text:
      options_kata@raw: locked@bool: yes
  workspace_widget/widget_clients_emails:
    fields:
      label: Email Addresses
      tab_id: {{records.tab_clients.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 1
      width_units@int: 2
      zone: content
      params:
        data_query@text:
          type:sample.records
          records:(help:())
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@text:
          layout:
            style: fieldsets
            headings@bool: no
            paging@bool: no
            filtering@bool: no

          columns:
            markdown/text:
              params:
                text_size@raw: 120%
                value@text:
                  An **email address** is a unique identifier used to send and receive electronic messages (emails) over the internet. It consists of two main parts separated by the "@" symbol:

                  1. **Username**: This is the part before the "@" and represents the specific user or account. It can include letters, numbers, and some special characters.

                  2. **Domain**: This is the part after the "@" and refers to the mail server or service provider handling the email. It typically consists of a domain name (like "gmail" or "companyname") followed by a top-level domain (like ".com" or ".org").

                  Email addresses are required to communicate via email, and they are unique to each individual or account, ensuring that messages are sent to the right person or mailbox.
        toolbar_kata@text:
  workspace_widget/widget_clients_list_of_emails:
    fields:
      label: List of Email Addresses
      tab_id: {{records.tab_clients.id}}
      extension_id: core.workspace.widget.worklist
      pos@int: 2
      width_units@int: 2
      zone: content
      params:
        context: cerberusweb.contexts.address
        query_required@text:
        query: sort:email
        render_limit: 5
        header_color: #6a87db
        columns@list:
          a_contact_id
          o_name
  workspace_widget/widget_clients_orgs:
    fields:
      label: Organizations
      tab_id: {{records.tab_clients.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 3
      width_units@int: 2
      zone: content
      params:
        data_query@text:
          type:sample.records
          records:(help:())
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@text:
          layout:
            style: fieldsets
            headings@bool: no
            paging@bool: no
            filtering@bool: no

          columns:
            markdown/text:
              params:
                text_size@raw: 120%
                value@text:
                  An **organization** is a group of related email addresses.

                  For instance, the email addresses may all be employees of the same company.

                  When information is stored on an organization, it is also available from any of its email addresses. If you operate in a business-to-business (B2B) market, organization records are the ideal place to keep track of utilized products and services.
        toolbar_kata@text:
  workspace_widget/widget_clients_list_of_orgs:
    fields:
      label: List of Organizations
      tab_id: {{records.tab_clients.id}}
      extension_id: core.workspace.widget.worklist
      pos@int: 4
      width_units@int: 2
      zone: content
      params:
        context: cerberusweb.contexts.org
        query_required@text:
        query: sort:name
        render_limit: 5
        header_color: #6a87db
        columns@list:
          c_email_id
          c_updated
          c_country
          c_phone
          c_website
  workspace_widget/widget_clients_contacts:
    fields:
      label: Contacts
      tab_id: {{records.tab_clients.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 5
      width_units@int: 2
      zone: content
      params:
        data_query@text:
          type:sample.records
          records:(help:())
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@text:
          layout:
            style: fieldsets
            headings@bool: no
            paging@bool: no
            filtering@bool: no

          columns:
            markdown/text:
              params:
                text_size@raw: 120%
                value@text:
                  **Contacts** are the personal identities of your clients, customers, partners, and other entities that workers interact with.

                  By linking a contact to an email address, you can track fields like: name, job title, organization, location, language, timezone, phone, gender, and profile picture.

                  Contacts are also used for authentication in some customer-facing portals like the Support Center.
        toolbar_kata@text:
  workspace_widget/widget_clients_list_of_contacts:
    fields:
      label: List of Contacts
      tab_id: {{records.tab_clients.id}}
      extension_id: core.workspace.widget.worklist
      pos@int: 6
      width_units@int: 2
      zone: content
      params:
        context: cerberusweb.contexts.contact
        query_required@text:
        query: sort:[firstName,lastName]
        render_limit: 5
        header_color: #6a87db
        columns@list:
          c_primary_email_id
          c_title
          c_location
          c_timezone
  workspace_tab/tab_tickets:
    fields:
      name: Tickets
      page_id: {{records.page_tutorial.id}}
      extension_id: core.workspace.tab.dashboard
      pos@int: 7
      params:
        layout@text:
        prompts_kata@text:
      options_kata@raw: locked@bool: yes
  workspace_widget/widget_tickets:
    fields:
      label: Tickets
      tab_id: {{records.tab_tickets.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 1
      width_units@int: 2
      zone: content
      params:
        data_query@text:
          type:sample.records
          records:(example:())
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@text:
          layout:
            style: fieldsets
            headings@bool: no
            paging@bool: no
            filtering@bool: no

          columns:
            markdown/instructions:
              params:
                text_size@raw: 120%
                value@text:
                  You can think of a [**ticket**](https://cerb.ai/docs/tickets/) as a brief project based on a specific question or issue. Tickets are usually created from email conversations.

                  A ticket's [profile](https://cerb.ai/docs/profiles/) page is a workspace that groups together email correspondence, comments, attachments, etc.

                  Each ticket functions like a private mailing list. Any number of [contacts](/docs/contacts/) may be subscribed to a ticket conversation as **participants**, and they will receive a copy of all outgoing email messages from your team.

                  The **worker** who is currently responsible for a ticket's completion is its **owner**.

        toolbar_kata@text:
  workspace_widget/widget_status:
    fields:
      label: Status
      tab_id: {{records.tab_tickets.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 2
      width_units@int: 2
      zone: content
      params:
        data_query@text:
          type:sample.records
          records:(example:())
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@text:
          layout:
            style: fieldsets
            headings@bool: no
            paging@bool: no
            filtering@bool: no

          columns:
            markdown/instructions:
              params:
                text_size@raw: 120%
                value@text:
                  The **status** of a **ticket** is always one of the following:

                  ||
                  |-:|:-
                  |**open**| the conversation needs worker attention
                  |**waiting**| the conversation is on hold pending client action
                  |**closed**| the conversation has concluded
                  |**deleted**| the conversation is flagged for deletion during the next maintenance window

                  You'll most likely have at least one worklist dedicated to _open_ tickets if you're responsible for responding to inquiries from contacts.

                  When a ticket is changed to the _waiting_ status you can also schedule a **reopen at** date and time, at which point the conversation will automatically return to the _open_ status.  This keeps your inbox free of tickets that you can't work on until a later date.  It's also a great way to schedule followups on sales or marketing messages.

                  If a contact adds a new message to a ticket that is _waiting_ or _closed_ it will automatically change back to the _open_ status.

                  By default, when a ticket is deleted you will have 7 days from its last activity to change it to a different status before it's removed permanently.  This is known as the "undo window".

        toolbar_kata@text:
  workspace_widget/widget_list_of_tickets:
    fields:
      label: List of Open Tickets
      tab_id: {{records.tab_tickets.id}}
      extension_id: core.workspace.widget.worklist
      pos@int: 3
      width_units@int: 4
      zone: content
      params:
        context: cerberusweb.contexts.ticket
        query_required: status:o
        query: sort:created subtotal:group.id
        render_limit: 10
        header_color: #6a87db
        columns@list:
          t_importance
          t_last_wrote_address_id
          t_group_id
          t_bucket_id
          t_owner_id
          t_updated_date
  workspace_widget/widget_ticket_buckets:
    fields:
      label: Buckets
      tab_id: {{records.tab_tickets.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 4
      width_units@int: 2
      zone: content
      params:
        data_query@text:
          type:sample.records
          records:(example:())
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@text:
          layout:
            style: fieldsets
            headings@bool: no
            paging@bool: no
            filtering@bool: no

          columns:
            markdown/instructions:
              params:
                text_size@raw: 120%
                value@text:
                  Tickets are sorted into [**buckets**](https://cerb.ai/docs/buckets/) within **groups**.

                  Every group has an **inbox** bucket to collect new assignments. From there, tickets are sorted into the most appropriate bucket by [workers](https://cerb.ai/docs/workers/) and [automations](https://cerb.ai/docs/automations/).

                  Here's an example bucket structure:

                  * Development:
                    * **Inbox**
                    * **Feature requests**
                    * **Bug reports**
                    * **Troubleshooting**

                  * Support:
                    * **Inbox**
                    * **Inquiries**
                    * **Documentation**
                    * **Training**
        toolbar_kata@text:
  workspace_widget/widget_list_of_buckets:
    fields:
      label: List of Buckets
      tab_id: {{records.tab_tickets.id}}
      extension_id: core.workspace.widget.worklist
      pos@int: 5
      width_units@int: 2
      zone: content
      params:
        context: cerberusweb.contexts.bucket
        query_required@text:
        query: sort:name
        render_limit: 10
        header_color: #6a87db
        columns@list:
          b_name
          b_group_id
          b_updated_at
  workspace_widget/widget_masks:
    fields:
      label: Masks
      tab_id: {{records.tab_tickets.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 6
      width_units@int: 2
      zone: content
      params:
        data_query@text:
          type:sample.records
          records:(example:())
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@text:
          layout:
            style: fieldsets
            headings@bool: no
            paging@bool: no
            filtering@bool: no

          columns:
            markdown/instructions:
              params:
                text_size@raw: 120%
                value@text:
                  Every ticket is automatically assigned a unique, non-sequential reference **mask**, like:

                  ```
                  RYS-07092-012
                  ```

                  The term _"mask"_ refers to the fact that the randomized reference number (opposed to a numeric ID) doesn't disclose information about your total number of tickets or your daily email volume.

                  A contact can provide the first three letters of the mask for quick lookups.

        toolbar_kata@text:
  workspace_widget/widget_importance:
    fields:
      label: Importance
      tab_id: {{records.tab_tickets.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 7
      width_units@int: 2
      zone: content
      params:
        data_query@text:
          type:sample.records
          records:(example:())
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@text:
          layout:
            style: fieldsets
            headings@bool: no
            paging@bool: no
            filtering@bool: no

          columns:
            markdown/instructions:
              params:
                text_size@raw: 120%
                value@text:
                  Ticket priority is determined by the **importance** field. You'll encounter importance as a simple slider where you can nudge it up or down as needed.

                  The importance field can also be automatically adjusted by [automations](https://cerb.ai/docs/automations/) in response to service level committments, escalations, etc.
            slider/importanceLow:
              params:
                #text_size@raw: 200%
                value: 25
                min: 0
                max: 100
            slider/importancehigh:
              params:
                #text_size@raw: 200%
                value: 75
                min: 0
                max: 100

        toolbar_kata@text:
  workspace_widget/widget_response_times:
    fields:
      label: Response Times
      tab_id: {{records.tab_tickets.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 8
      width_units@int: 2
      zone: content
      params:
        data_query@text:
          type:sample.records
          records:(example:())
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@text:
          layout:
            style: fieldsets
            headings@bool: no
            paging@bool: no
            filtering@bool: no

          columns:
            markdown/instructions:
              params:
                text_size@raw: 120%
                value@text:
                  Cerb records ticket-level **response time** information in two fields:

                  ||
                  |-|-
                  |**First response**:| The total time elapsed before the first response from a worker. This focuses on the first response so that it isn't skewed by later delays that may be attributed to the client.
                  |**First resolution**:| The total time elapsed before the ticket was first changed to the _closed_ status. This isn't affected by subsequent changes between the _open_ and _closed_ statuses that may occur when you get stuck in a loop of _"Thanks!"_ and _"You're welcome!"_ -- especially because that may occur days after the ticket was actually resolved.

                  When a worker responds to a specific client message, Cerb also records the response time on the worker's message. This encourages workers to respond quickly, even if it's only to say, _"Let me check on that and get right back to you"._

        toolbar_kata@text:
  workspace_widget/widget_anti_spam:
    fields:
      label: Anti-Spam
      tab_id: {{records.tab_tickets.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 9
      width_units@int: 2
      zone: content
      params:
        data_query@text:
          type:sample.records
          records:(example:())
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@text:
          layout:
            style: fieldsets
            headings@bool: no
            paging@bool: no
            filtering@bool: no

          columns:
            markdown/instructions:
              params:
                text_size@raw: 120%
                value@text:
                  Cerb performs a simple statistical analysis of the contents of the first message on new **tickets** to predict whether a message is spam or not.

                  The predicted probability of being spam is stored as a **spam score** on the ticket with a range from 0.01% (not spam) to 99.99% (spam).

                  By itself, this prediction has no effect on tickets. However, the computed score can be used by [automations](https://cerb.ai/docs/automations/) and [workers](https://cerb.ai/docs/workers/) to filter mail when desirable.

                  The spam predictions improve and adapt over time through training.  When a worker replies to a client message, Cerb learns to be more approving of similar messages in the future.

                  When workers click the **Report spam** button on a ticket, Cerb becomes more critical of similar messages in the future.

        toolbar_kata@text:
  workspace_widget/widget_drafts:
    fields:
      label: Drafts
      tab_id: {{records.tab_tickets.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 10
      width_units@int: 2
      zone: content
      params:
        data_query@text:
          type:sample.records
          records:(example:())
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@text:
          layout:
            style: fieldsets
            headings@bool: no
            paging@bool: no
            filtering@bool: no

          columns:
            markdown/instructions:
              params:
                text_size@raw: 120%
                value@text:
                  **Drafts** automatically save the current progress of a worker's email message before they send it. This allows a composed message to be resumed at a later date, and it provides a _backup_ (e.g. the browser crashes or otherwise unintentionally closes).

                  In-progress drafts are displayed in a ticket's conversation timeline, which instantly lets _other_ workers know that a response is being sent so they can move on to a different ticket.  This prevents _duplication of effort_.

                  Similarly, a trainee can ask a supervisor to review their draft before they send a message to a client.

        toolbar_kata@text:
  workspace_widget/widget_merge_split:
    fields:
      label: Merge/Split
      tab_id: {{records.tab_tickets.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 11
      width_units@int: 2
      zone: content
      params:
        data_query@text:
          type:sample.records
          records:(example:())
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@text:
          layout:
            style: fieldsets
            headings@bool: no
            paging@bool: no
            filtering@bool: no

          columns:
            markdown/instructions:
              params:
                text_size@raw: 120%
                value@text:
                  Related tickets from the same participants can be **merged** together into a single ticket, which combines all of the messages and comments.

                  Conversely, if a ticket conversation diverges into multiple topics that would be better handled by other groups or workers, one or more messages can be **split** off into new tickets.

        toolbar_kata@text:
  workspace_tab/tab_email:
    fields:
      name: Email
      page_id: {{records.page_tutorial.id}}
      extension_id: core.workspace.tab.dashboard
      pos@int: 8
      params:
        layout@text:
        prompts_kata@text:
      options_kata@raw: locked@bool: yes
  workspace_widget/widget_incoming_email:
    fields:
      label: Incoming Email
      tab_id: {{records.tab_email.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 1
      width_units@int: 2
      zone: content
      params:
        data_query@text:
          type:sample.records
          records:(example:())
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@text:
          layout:
            style: fieldsets
            headings@bool: no
            paging@bool: no
            filtering@bool: no

          columns:
            markdown/instructions:
              params:
                text_size@raw: 120%
                value@text:
                  Cerb downloads new email messages from any number of POP3- or IMAP-compliant mailboxes.

                  Downloaded messages will be deleted on the server. If your mail server doesn't archive deleted messages, it's recommended that you create a mailbox specifically for Cerb and redirect a copy of new messages to it. You can route multiple mailboxes to a single dropbox that is checked by Cerb.

                  Cerb supports XOAUTH, which is a modern authentication method required by email providers like Google and Microsoft.

                  In Cerb Cloud you can also redirect a copy of your inbound email to an address like `inbound@{your-instance}.cerb.email` for instant delivery without using mailboxes.

                  New email messages will either create a new ticket or be threaded to existing tickets as replies. Cerb uses the standard `In-Reply-To:` and `References:` email headers for threading. As a fallback, ticket masks are also detected in the subject line.

                  These guides cover configuring inbound email:
                  * [Authenticate a Gmail mailbox using IMAP and XOAUTH2](https://cerb.ai/guides/integrations/google/gmail-xoauth/)
                  * [Authenticate an Office365 mailbox using XOAUTH2](https://cerb.ai/guides/integrations/azure/o365-xoauth/)
        toolbar_kata@text:
  workspace_widget/widget_list_of_email_mailboxes:
    fields:
      label: List of Email Mailboxes
      tab_id: {{records.tab_email.id}}
      extension_id: core.workspace.widget.worklist
      pos@int: 2
      width_units@int: 2
      zone: content
      params:
        context: cerberusweb.contexts.mailbox
        query_required@text:
        query: sort:name
        render_limit: 5
        header_color: #6a87db
        columns@list:
          p_name
          p_protocol
          p_host
          p_num_fails
          p_checked_at
  workspace_widget/widget_email_routing:
    fields:
      label: Email Routing
      tab_id: {{records.tab_email.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 3
      width_units@int: 2
      zone: content
      params:
        data_query@text:
          type:sample.records
          records:(example:())
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@text:
          layout:
            style: fieldsets
            headings@bool: no
            paging@bool: no
            filtering@bool: no

          columns:
            markdown/instructions:
              params:
                text_size@raw: 120%
                value@text:
                  When a new ticket is created, **mail routing rules** determine which group it is delivered to. These rules can be based on any combination of attributes: sender, recipient, subject, headers, body content, language, day of week, time of day, etc.

                  Mail routing rules are written in Cerb's [**KATA**](https://cerb.ai/docs/kata/) language. This is a simplified YAML-like syntax that is easy for humans and machines to write.

                  If a message doesn't match any rules, it is delivered to the **default group** defined in **Setup > Mail > Incoming**.

                  By default, tickets are created in the **Inbox** bucket of the receiving group. An additional set of mail routing rules can be configured on each group to sort tickets into buckets, auto-assign workers, set importance, set custom fields, add comments, send notifications, etc.

                  For complex routing requirements -- like classification from a large language model (LLM) -- **automations** can be used to route mail based on your custom logic and third-party integrations. Mail routing rules are used if no automations handle a message.

                  You can test email routing from **Setup > Mail > Incoming > Import**.
        toolbar_kata@text:
  workspace_widget/widget_list_of_email_routing_rules:
    fields:
      label: List of Email Routing Rules
      tab_id: {{records.tab_email.id}}
      extension_id: core.workspace.widget.worklist
      pos@int: 4
      width_units@int: 2
      zone: content
      params:
        context: cerb.contexts.mail.routing.rule
        query_required@text:
        query: sort:priority
        render_limit: 5
        header_color: #6a87db
        columns@list:
          m_name
          m_priority
          m_updated_at
  workspace_widget/widget_outgoing_email:
    fields:
      label: Outgoing Email
      tab_id: {{records.tab_email.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 5
      width_units@int: 2
      zone: content
      params:
        data_query@text:
          type:sample.records
          records:(example:())
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@text:
          layout:
            style: fieldsets
            headings@bool: no
            paging@bool: no
            filtering@bool: no

          columns:
            markdown/instructions:
              params:
                text_size@raw: 120%
                value@text:
                  Cerb sends outgoing email using any number of SMTP-compliant mail servers. These **mail transports** can be an existing mailbox from a provider like Gmail or Microsoft Exchange, or a service like Amazon SES, Sendgrid, or Postmark.

                  There are many reasons you might want to use multiple transports:

                  * In development or test environments, you can use a **null** mail transport to prevent sending live email.

                  * If you manage multiple brands, each can use their own transport and sender reputation.

                  * You can use an official corporate mail server if required by policy.

                  * By configuring a backup mail transport, you can continue to serve customers during problems with your primary transport.

                  You should ensure that your SPF, DKIM, and DMARC records are configured properly in DNS for each domain you send email from. Refer to the instructions from your email provider.
        toolbar_kata@text:
  workspace_widget/widget_list_of_email_transports:
    fields:
      label: List of Email Transports
      tab_id: {{records.tab_email.id}}
      extension_id: core.workspace.widget.worklist
      pos@int: 6
      width_units@int: 2
      zone: content
      params:
        context: cerberusweb.contexts.mail.transport
        query_required@text:
        query: sort:name
        render_limit: 5
        header_color: #6a87db
        columns@list:
          m_name
          m_extension_id
          m_updated_at
  workspace_widget/widget_sender_addresses:
    fields:
      label: Sender Addresses
      tab_id: {{records.tab_email.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 7
      width_units@int: 2
      zone: content
      params:
        data_query@text:
          type:sample.records
          records:(example:())
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@text:
          layout:
            style: fieldsets
            headings@bool: no
            paging@bool: no
            filtering@bool: no

          columns:
            markdown/instructions:
              params:
                text_size@raw: 120%
                value@text:
                  When you assign a mail transport to an email address it becomes a **sender address**. You can share the same mail transport between many sender addresses.

                  Sender addresses are assigned to groups and buckets as the **From:** identity.

                  The default sender address is configured from **Setup > Mail > Outgoing > Settings**.
        toolbar_kata@text:
  workspace_widget/widget_list_sender_addresses:
    fields:
      label: List of Sender Addresses
      tab_id: {{records.tab_email.id}}
      extension_id: core.workspace.widget.worklist
      pos@int: 8
      width_units@int: 2
      zone: content
      params:
        context: cerberusweb.contexts.address
        query_required: mailTransport.id:!0
        query@text:
        render_limit: 5
        header_color: #6a87db
        columns@list:
          a_mail_transport_id
  workspace_widget/widget_email_signatures:
    fields:
      label: Email Signatures
      tab_id: {{records.tab_email.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 9
      width_units@int: 2
      zone: content
      params:
        data_query@text:
          type:sample.records
          records:(example:())
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@raw:
          layout:
            style: fieldsets
            headings@bool: no
            paging@bool: no
            filtering@bool: no

          columns:
            markdown/instructions:
              params:
                text_size@raw: 120%
                value@raw:
                  When sending email from Cerb, you'll notice a `#signature` tag at the bottom of your message. This will be replaced with the appropriate signature when your message is sent.

                  A signature is selected based on the bucket of the ticket. Buckets without a signature default to their parent group's signature.

                  The template of a signature may include placeholders like `{{first_name}}` and `{{title}}` that automatically adapt to the current worker. You can also include your own custom fields like office location, phone + extension, and so on.

                  Signatures can be in both plaintext and HTML formats. Both parts will be sent when HTML is enabled.

                  The `#signature` tag can also be used by automations to insert dynamic functionality like satisfaction survey links or special offers on outgoing messages. This is much easier than trying to match the final signature.

                  A signature record can be owned by a group or role to allow multiple workers to edit it.
        toolbar_kata@text:
  workspace_widget/widget_list_of_email_signatures:
    fields:
      label: List of Email Signatures
      tab_id: {{records.tab_email.id}}
      extension_id: core.workspace.widget.worklist
      pos@int: 10
      width_units@int: 2
      zone: content
      params:
        context: cerberusweb.contexts.email.signature
        query_required@text:
        query@text:
        render_limit: 5
        header_color: #6a87db
        columns@list:
          e_name
          *_owner
          e_updated_at
  workspace_widget/widget_html_formatting:
    fields:
      label: HTML Formatting
      tab_id: {{records.tab_email.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 11
      width_units@int: 2
      zone: content
      params:
        data_query@text:
          type:sample.records
          records:(example:())
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@text:
          layout:
            style: fieldsets
            headings@bool: no
            paging@bool: no
            filtering@bool: no

          columns:
            markdown/instructions:
              params:
                text_size@raw: 120%
                value@raw:
                  When sending HTML email from Cerb, a mail template is used for the layout. For instance, a newsletter layout could display your logo at the top and use your brand's color scheme.

                  The default HTML template is configured on each bucket or group. Optionally, a different template can be selected in the email editor when composing or replying.

                  While a mail template can use raw HTML code, workers use **Markdown** syntax to format their messages.

                  ||
                  |:-|:-
                  | `**Bold**` | **Bold**
                  | `_italics_` | _italics_
                  | `[link](https://cerb.ai)` | [link](https://cerb.ai)
                  | \`code_format\` | `code_format`

                  ```
                  * Bullet point 1
                  * Bullet point 2
                  ```

                  ~~~
                  ```
                  function example() {
                    // Code blocks
                  }
                  ```
                  ~~~

                  See:
                  * [Send email on company letterhead](https://cerb.ai/guides/mail/html-templates/)
        toolbar_kata@text:
  workspace_widget/widget_list_of_html_templates:
    fields:
      label: List of HTML Templates
      tab_id: {{records.tab_email.id}}
      extension_id: core.workspace.widget.worklist
      pos@int: 12
      width_units@int: 2
      zone: content
      params:
        context: cerberusweb.contexts.mail.html_template
        query_required@text:
        query: sort:name
        render_limit: 5
        header_color: #6a87db
        columns@list:
          m_name
          m_updated_at
  workspace_tab/tab_tasks:
    fields:
      name: Tasks
      page_id: {{records.page_tutorial.id}}
      extension_id: core.workspace.tab.dashboard
      pos@int: 9
      params:
        layout@text:
        prompts_kata@text:
      options_kata@raw: locked@bool: yes
  workspace_widget/widget_tasks:
    fields:
      label: Tasks
      tab_id: {{records.tab_tasks.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 1
      width_units@int: 2
      zone: content
      params:
        data_query@text:
          type:sample.records
          records:(example:())
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@text:
          layout:
            style: fieldsets
            headings@bool: no
            paging@bool: no
            filtering@bool: no

          columns:
            markdown/instructions:
              params:
                text_size@raw: 120%
                value@text:
                  **Tasks** are units of work that should be handled by a single worker. They may include an optional **due date** and **importance** rating. A task's profile page functions as a miniature project; with widgets, comment threads, attachments, and record links.

                  Just like tickets, a task's **status** can be open, waiting, or closed.

                  If a ticket requires simultaneous action items from multiple workers, a task can be created for each action and linked to the same ticket.
        toolbar_kata@text:
  workspace_widget/widget_list_of_tasks:
    fields:
      label: List of Tasks
      tab_id: {{records.tab_tasks.id}}
      extension_id: core.workspace.widget.worklist
      pos@int: 2
      width_units@int: 4
      zone: content
      params:
        context: cerberusweb.contexts.task
        query_required@text:
        query: sort:-updated
        render_limit: 15
        header_color: #6a87db
        columns@list:
          t_title
          t_due_date
          t_status_id
          t_importance
          t_owner_id
  workspace_tab/tab_reminders:
    fields:
      name: Reminders
      page_id: {{records.page_tutorial.id}}
      extension_id: core.workspace.tab.dashboard
      pos@int: 10
      params:
        layout@text:
        prompts_kata@text:
      options_kata@raw: locked@bool: yes
  workspace_widget/widget_reminders:
    fields:
      label: Reminders
      tab_id: {{records.tab_reminders.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 1
      width_units@int: 2
      zone: content
      params:
        data_query@text:
          type:sample.records
          records:(example:())
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@text:
          layout:
            style: fieldsets
            headings@bool: no
            paging@bool: no
            filtering@bool: no

          columns:
            markdown/instructions:
              params:
                text_size@raw: 120%
                value@text:
                  [**Reminders**](https://cerb.ai/docs/reminders/) are scheduled messages to [workers](https://cerb.ai/docs/workers/) at a specific future date and time.

                  A reminder can be [linked](https://cerb.ai/docs/records/links/) to any number of [records](https://cerb.ai/docs/records/).

                  When a reminder is triggered, it may run any number of [automations](https://cerb.ai/docs/automations/). These are typically different methods for contacting a worker depending on the urgency of the reminder (e.g. notification, email, mobile text message, Slack, etc).

        toolbar_kata@text:
  workspace_widget/widget_list_of_reminders:
    fields:
      label: List of Reminders
      tab_id: {{records.tab_reminders.id}}
      extension_id: core.workspace.widget.worklist
      pos@int: 2
      width_units@int: 4
      zone: content
      params:
        context: cerberusweb.contexts.reminder
        query_required@text:
        query: sort:remindAt
        render_limit: 10
        header_color: #6a87db
        columns@list:
          r_name
          r_remind_at
          r_worker_id
          r_updated_at
  workspace_tab/tab_calendars:
    fields:
      name: Calendars
      page_id: {{records.page_tutorial.id}}
      extension_id: core.workspace.tab.dashboard
      pos@int: 11
      params:
        layout@text:
        prompts_kata@text:
      options_kata@raw: locked@bool: yes
  workspace_widget/widget_calendars:
    fields:
      label: Calendars
      tab_id: {{records.tab_calendars.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 1
      width_units@int: 2
      zone: content
      params:
        data_query@text:
          type:sample.records
          records:(help:())
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@text:
          layout:
            style: fieldsets
            headings@bool: no
            paging@bool: no
            filtering@bool: no

          columns:
            markdown/text:
              params:
                text_size@raw: 120%
                value@text:
                  **Calendars** can plot any date-based record data on a familiar grid of months and days.
        toolbar_kata@text:
  workspace_widget/widget_list_of_calendars:
    fields:
      label: List of Calendars
      tab_id: {{records.tab_calendars.id}}
      extension_id: core.workspace.widget.worklist
      pos@int: 2
      width_units@int: 2
      zone: content
      params:
        context: cerberusweb.contexts.calendar
        query_required@text:
        query: sort:name
        render_limit: 5
        header_color: #6a87db
        columns@list:
          c_name
          c_timezone
          *_owner
          c_updated_at
  workspace_widget/widget_calendar_my:
    fields:
      label: Calendar
      tab_id: {{records.tab_calendars.id}}
      extension_id: core.workspace.widget.calendar
      pos@int: 3
      width_units@int: 4
      zone: content
      params:
        calendar_id@raw: {{current_worker_calendar_id}}
  workspace_tab/tab_data_queries:
    fields:
      name: Data Queries
      page_id: {{records.page_tutorial.id}}
      extension_id: core.workspace.tab.dashboard
      pos@int: 12
      params:
        layout: sidebar_right
        prompts_kata@text:
      options_kata@raw: locked@bool: yes
  workspace_widget/widget_data_queries:
    fields:
      label: Data Queries
      tab_id: {{records.tab_data_queries.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 1
      width_units@int: 4
      zone: content
      params:
        data_query@text:
          type:sample.records
          records:(help:())
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@text:
          layout:
            style: fieldsets
            headings@bool: no
            paging@bool: no
            filtering@bool: no

          columns:
            markdown/text:
              params:
                text_size@raw: 120%
                value@text:
                  [**Data queries**](https://cerb.ai/docs/data-queries/) are a purpose-built, text-based query language to retrieve, transform, and format data for visualizations.

                  These textual queries are very simple to write in [automations](https://cerb.ai/docs/automations/), [dashboard widgets](https://cerb.ai/docs/dashboards/), [sheets](https://cerb.ai/docs/sheets/), or the [API](https://cerb.ai/docs/api/).

                  A data query is a collection of `key:value` pairs.

                  Every query must include a `type:` key:

                  ```cerb
                  type:worklist.subtotals
                  ```

                  A `format:` key prepares the response for different visualizations:

                  ```
                  format:dictionaries
                  ```

                  Additional keys are available depending on the type of data being requested.
        toolbar_kata@text:
  workspace_widget/widget_data_query_tickets_created_per_group_by_month_12mo:
    fields:
      label: Data Query: Tickets created per group by day (past 2wk)
      tab_id: {{records.tab_data_queries.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 1
      width_units@int: 4
      zone: sidebar
      params:
        data_query@text:
          type:sample.records
          records:(help:())
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@text:
          layout:
            style: fieldsets
            headings@bool: no
            paging@bool: no
            filtering@bool: no

          columns:
            markdown/text:
              params:
                text_size@raw: 120%
                value@text:
                  ```cerb
                  type:worklist.subtotals
                  of:ticket
                  by:[created@day,group~20]
                  query:(created:"-2 weeks")
                  format:timeseries
                  ```
            toolbar/actions:
              params:
                kata:
                  interaction/run:
                    label: Run Query
                    icon: play
                    uri: cerb:automation:ai.cerb.tutorial.dataQueries
        toolbar_kata@text:
  workspace_widget/widget_list_of_data_query_types:
    fields:
      label: List of Data Query Types
      tab_id: {{records.tab_data_queries.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 2
      width_units@int: 4
      zone: content
      params:
        data_query@text:
          type:data.query.types
          exclude_custom:yes
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@raw:
          layout:
            style: columns
            headings@bool: no
            paging@bool: yes
            filtering@bool: no

          columns:
            link/name:
              params:
                bold@bool: yes
                text_size: 125%
                text_key: name
                href_template@raw: {{docs_url|default('https://cerb.ai/docs/data-queries/')}}
                icon:
                  image: new-window-alt
                  at: end
                href_new_tab@bool: yes
            text/description:
        toolbar_kata@text:
  workspace_tab/tab_workspaces:
    fields:
      name: Workspaces & Dashboards
      page_id: {{records.page_tutorial.id}}
      extension_id: core.workspace.tab.dashboard
      pos@int: 13
      params:
        layout@text:
        prompts_kata@text:
      options_kata@raw: locked@bool: yes
  workspace_widget/widget_workspaces:
    fields:
      label: Workspaces
      tab_id: {{records.tab_workspaces.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 1
      width_units@int: 2
      zone: content
      params:
        data_query@text:
          type:sample.records
          records:(help:())
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@text:
          layout:
            style: fieldsets
            headings@bool: no
            paging@bool: no
            filtering@bool: no

          columns:
            icon/dashboards:
              params:
                svg:
                  data: <svg xmlns="http://www.w3.org/2000/svg" width="500" viewBox="0 0 240 135"><g id="Layer_1-2" data-name="Layer_1"><path d="M0 0h240v135H0z" style="fill:#ccc"/><path d="M20.29 27H64.8c2.3 0 4.16 1.87 4.16 4.16v11.29H15.52V31.76c0-2.63 2.14-4.77 4.77-4.77Z" style="fill:#f2f2f2"/><path d="M75.31 27h34.96c2.3 0 4.16 1.87 4.16 4.16v11.29H70.54V31.76c0-2.63 2.14-4.77 4.77-4.77ZM120.44 27h38.05c2.3 0 4.16 1.87 4.16 4.16v11.29h-46.98V31.76c0-2.63 2.14-4.77 4.77-4.77ZM168.66 27h36.81c2.3 0 4.16 1.87 4.16 4.16v11.29h-45.75V31.76c0-2.63 2.14-4.77 4.77-4.77Z" style="fill:#b3b3b3"/><path d="M15.52 41.84H222v64.29H15.52z" style="fill:#f2f2f2"/><rect width="55.64" height="45.75" x="19.23" y="48.02" style="fill:#fff" rx="4.47" ry="4.47"/><rect width="55.64" height="45.75" x="160.18" y="48.02" style="fill:#fff" rx="4.47" ry="4.47"/><rect width="79.13" height="45.75" x="77.34" y="48.02" style="fill:#fff" rx="4.47" ry="4.47"/><path d="M33.38 79.16c-4.34-7.35-1.9-16.83 5.46-21.17L46.7 71.3l-13.32 7.86Z" style="fill:#b9b9b9"/><path d="M60.01 63.44c-4.34-7.35-13.82-9.8-21.17-5.46l7.86 13.31 7.86 13.32c7.35-4.34 9.8-13.82 5.46-21.17Z" style="fill:#5e5e5e"/><path d="M33.38 79.16c4.34 7.35 13.82 9.8 21.17 5.46L46.69 71.3l-13.32 7.86Z" style="fill:#929292"/><path d="m47.12 71.58-.42-.28-7.86-13.31a15.398 15.398 0 0 0-6.7 8.13l14.98 5.47Z" style="fill:#505050"/><path d="M88.93 51.73h56.48c2.98 0 5.41 2.42 5.41 5.41v1.28h-67.3v-1.28c0-2.98 2.42-5.41 5.41-5.41Z" style="fill:#666"/><path d="M83.52 62.87h67.3v5.35h-67.3z" style="fill:#f2f2f2"/><path d="M83.52 68.22h67.3v5.35h-67.3z" style="fill:#ebebeb"/><path d="M83.52 73.57h67.3v5.35h-67.3zM83.52 84.26h67.3v5.79h-67.3z" style="fill:#f2f2f2"/><path d="M83.52 78.91h67.3v5.35h-67.3z" style="fill:#ebebeb"/><path d="M83.52 58.41h67.3v4.46h-67.3z" style="fill:#b3b3b3"/><rect width="38.56" height="1.78" x="85.52" y="63.76" style="fill:#b3b3b3" rx=".72" ry=".72"/><rect width="20.73" height="1.34" x="85.52" y="65.99" style="fill:#e6e6e6" rx=".54" ry=".54"/><rect width="14.94" height="1.34" x="112.7" y="65.99" style="fill:#e6e6e6" rx=".54" ry=".54"/><rect width="9.59" height="1.34" x="136.33" y="65.99" style="fill:#e6e6e6" rx=".54" ry=".54"/><rect width="33.66" height="1.78" x="85.52" y="69.11" style="fill:#b3b3b3" rx=".72" ry=".72"/><rect width="20.73" height="1.34" x="85.52" y="71.34" style="fill:#ccc" rx=".54" ry=".54"/><rect width="14.94" height="1.34" x="112.7" y="71.34" style="fill:#ccc" rx=".54" ry=".54"/><rect width="9.59" height="1.34" x="136.33" y="71.34" style="fill:#ccc" rx=".54" ry=".54"/><rect width="46.58" height="1.78" x="85.52" y="74.46" style="fill:#b3b3b3" rx=".72" ry=".72"/><rect width="20.73" height="1.34" x="85.52" y="76.69" style="fill:#e6e6e6" rx=".54" ry=".54"/><rect width="14.94" height="1.34" x="112.7" y="76.69" style="fill:#e6e6e6" rx=".54" ry=".54"/><rect width="9.59" height="1.34" x="136.33" y="76.69" style="fill:#e6e6e6" rx=".54" ry=".54"/><rect width="29.2" height="1.78" x="85.52" y="79.81" style="fill:#b3b3b3" rx=".72" ry=".72"/><rect width="20.73" height="1.34" x="85.52" y="82.03" style="fill:#ccc" rx=".54" ry=".54"/><rect width="14.94" height="1.34" x="112.7" y="82.03" style="fill:#ccc" rx=".54" ry=".54"/><rect width="9.59" height="1.34" x="136.33" y="82.03" style="fill:#ccc" rx=".54" ry=".54"/><rect width="34.55" height="1.78" x="85.52" y="85.15" style="fill:#b3b3b3" rx=".72" ry=".72"/><rect width="20.73" height="1.34" x="85.52" y="87.38" style="fill:#e6e6e6" rx=".54" ry=".54"/><rect width="14.94" height="1.34" x="112.7" y="87.38" style="fill:#e6e6e6" rx=".54" ry=".54"/><rect width="9.59" height="1.34" x="136.33" y="87.38" style="fill:#e6e6e6" rx=".54" ry=".54"/><text style="fill:#666;font-family:Arial-Black,&quot;Arial Black&quot;;font-size:15.93px;font-weight:800" transform="matrix(1.05 0 0 1 37.19 40.97)"><tspan x="0" y="0">+</tspan></text><circle cx="46.43" cy="71.51" r="9.89" style="fill:#f2f2f2"/><path d="m167.1 85.72 4.2-13.38 1.92 4.59 2.67-10.33 2.68 8.03 4.2-11.08 2.68 9.55 6.12-21.02 2.29 16.44 4.6-9.59 1.91 6.5 3.43-9.15 4.97 13.76.38 20.65h-41.67l-.38-4.97z" style="stroke:#757575;stroke-width:.93px;fill:#e6e6e6"/><path d="m207.933 92.592.14-36.51 2.4.01-.14 36.51z" style="fill:#fff"/><path d="M148.31 72.96h36.51v2h-36.51z" style="fill:#fff;stroke:#fff" transform="rotate(-89.78 166.567 73.958)"/><path d="M165.24 89.58h45.49v4.18h-45.49z" style="fill:#fff"/></g></svg>
            markdown/text:
              params:
                text_size@raw: 120%
                value@text:
                  A **workspace** is a page designed to optimize a particular workflow.  Workspaces can be shared by everyone, shared within a [group](https://cerb.ai/docs/groups/) or [role](https://cerb.ai/docs/roles/), or private to a specific [worker](https://cerb.ai/docs/workers/).

                  You can add any number of workspace pages to your [navigation bar](https://cerb.ai/docs/guide/workers/user-interface/#pages) and personalize Cerb into your own mission control.

                  Workspaces use **tabs** to organize their content into sections; much like dividers are used to partition pages in a large binder.

                  The default workspace type is a **dashboard** -- a customizable and responsive collection of visualization widgets.
        toolbar_kata@text:
  workspace_widget/widget_list_of_workspaces:
    fields:
      label: List of Workspaces
      tab_id: {{records.tab_workspaces.id}}
      extension_id: core.workspace.widget.worklist
      pos@int: 2
      width_units@int: 2
      zone: content
      params:
        context: cerberusweb.contexts.workspace.page
        query_required@text:
        query: sort:name
        render_limit: 10
        header_color: #6a87db
        columns@list:
          w_name
          *_owner
          w_updated_at
  workspace_widget/widget_dashboards:
    fields:
      label: Dashboards
      tab_id: {{records.tab_workspaces.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 3
      width_units@int: 2
      zone: content
      params:
        data_query@text:
          type:sample.records
          records:(help:())
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@text:
          layout:
            style: fieldsets
            headings@bool: no
            paging@bool: no
            filtering@bool: no

          columns:
            markdown/text:
              params:
                text_size@raw: 120%
                value@text:
                  **Dashboards** provide visual insight with collections of highly customizable **widgets**. Most widgets take a [data query](https://cerb.ai/docs/data-queries/) as input.

                  Dashboards are **responsive** -- they automatically adapt to various screen sizes on different devices. If you have a narrow screen like a smartphone held vertically, you may only be able to display a single column of widgets. On a much larger desktop display, the same dashboard could display multiple horizontal columns of widgets.

                  Widgets can have different sizes relative to each other. For example, a large chart may be configured to display 2X-4X as wide as the widgets adjacent to it when that much space is available.

                  By configuring the **layout** of a dashboard, different **zones** become available for widgets to use. For instance, two zones could be a left-hand sidebar and a larger content area to the right of it. Widgets determine their size based on the zone they are in. These zones will also collapse to a single column when a device's screen is too narrow.

            toolbar/callouts:
              params:
                text_size@raw: 150%
                kata:
                  interaction/calloutAddWidget:
                    icon: circle-plus
                    label: Add Widget
                    uri: cerb:automation:cerb.interaction.echo
                    after:
                      refresh_widgets@bool: no
                    inputs:
                      outputs:
                        callout:
                          selector: #btnWorkspaceTabAddWidget750
                          message: Add widgets to a dashboard from the toolbar at the top.
                          my: left top+5
                          at: left bottom

        toolbar_kata@text:
  workspace_widget/widget_dashboard_widget_types:
    fields:
      label: Dashboard Widget Types
      tab_id: {{records.tab_workspaces.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 4
      width_units@int: 2
      zone: content
      params:
        data_query@text:
          type:sample.records
          records:(
            automation:(
              name:"Automation" description:"A custom widget generated by an automation"
            )
            calendar:(
              name:"Calendar" description:"A calendar with events from datasources"
            )
            chart:(
              name:"Chart" description:"A highly configurable visualization with datasets from data queries or automations, as: line, bar, stacked bar, pie, donut, categories, scatterplot, time series"
            )
            clock:(
              name:"Clock" description:"The current time in a given timezone"
            )
            countdown:(
              name:"Countdown" description:"The time remaining until a specific date/time event"
            )
            counter:(
              name:"Counter" description:"The count of a current metric (e.g. open tickets, avg response time)"
            )
            gauge:(
              name:"Gauge" description:"A quantitative visualization with comparison thresholds (e.g excellent, good, average, poor)"
            )
            interactions:(
              name:"Interactions Toolbar" description:"A custom toolbar of interactive automations"
            )
            kb:(
              name:"Knowledgebase Browser" description:"Knowledgebase articles and categories"
            )
            map:(
              name:"Map" description:"Render any map in GeoJSON/TopoJSON format and display points of interest from datasources"
            )
            projectBoard:(
              name:"Project Board" description:"A multi-column project board with custom rendered cards and drag/drop automation"
            )
            recordFields:(
              name:"Record Fields" description:"A set of fields and values for any record type and ID"
            )
            sheet:(
              name:"Sheet" description:"A highly configurable spreadsheet of rows and columns (tables, fieldsets, grids, columns), with custom data sources, text sizes, colors, paging, and filtering"
            )
            worklist:(
              name:"Worklist" description:"A worklist of record types with a custom data query"
            )

          )
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@text:
          layout:
            style: columns
            headings@bool: no
            paging@bool: no
            filtering@bool: no

          columns:
            text/name:
              params:
                bold@bool: yes
                text_size@raw: 125%
            text/description:
        toolbar_kata@text:
  workspace_widget/widget_chart_tickets_per_group_by_status:
    fields:
      label: Chart: Tickets per group by status (Past 1 year)
      tab_id: {{records.tab_workspaces.id}}
      extension_id: cerb.workspace.widget.chart.kata
      pos@int: 5
      width_units@int: 4
      zone: content
      params:
        datasets_kata@text:
          dataQuery/tickets:
            query@text:
              type:worklist.subtotals
              of:ticket
              by:[group~10,status]
              query:(status:!d created:"today -1 year to now")
              format: categories
        placeholder_simulator_kata@text:
        chart_kata@text:
          data:
            type: bar
            series:
              tickets:
                x_key: label
            stacks:
              0@csv: tickets

          axis:
            rotated@bool: yes
            x:
              type: category

          tooltip:
            grouped@bool: no
  workspace_widget/widget_clock_los_angeles:
    fields:
      label: Clock: Los Angeles
      tab_id: {{records.tab_workspaces.id}}
      extension_id: core.workspace.widget.clock
      pos@int: 6
      width_units@int: 2
      zone: content
      params:
        timezone: America/Los_Angeles
        format: 0
  workspace_widget/widget_counter_open_tickets:
    fields:
      label: Counter: # Open Tickets
      tab_id: {{records.tab_workspaces.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 7
      width_units@int: 2
      zone: content
      params:
        data_query@text:
          type:worklist.subtotals
          of:ticket
          by:status
          query:(status:o)
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@text:
          layout:
            style: fieldsets
            headings@bool: no
            paging@bool: no
            filtering@bool: no

          columns:
            search/count:
              params:
                bold@bool: yes
                text_size@raw: 300%
                context: ticket
                query_template@raw: status:o
                underline@bool: no
        toolbar_kata@text:
  workspace_widget/widget_metric_avg_response_time_past_30_days:
    fields:
      label: Metric: Avg. Response Time (Past 30 days)
      tab_id: {{records.tab_workspaces.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 8
      width_units@int: 2
      zone: content
      params:
        data_query@text:
          type:worklist.subtotals
          of:message
          by.avg:[responseTime]
          query:(worker.id:!0 created:"-30 days to now")
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@raw:
          layout:
            style: table
            headings@bool: no
            paging@bool: no

          columns:
            text/responseTime:
              label: Avg. Response Time
              params:
                text_size@raw: 300%
                bold@bool: yes
                value_template@raw:
                  {% set secs = responseTime*60 %}
                  {{secs|secs_pretty(2)}}
        toolbar_kata@text:
  workspace_widget/widget_interactions_toolbar:
    fields:
      label: Interactions Toolbar
      tab_id: {{records.tab_workspaces.id}}
      extension_id: core.workspace.widget.form_interaction
      pos@int: 9
      width_units@int: 2
      zone: content
      params:
        interactions_kata@text:
          interaction/test:
            label: Interaction
            uri: cerb:automation:cerb.interaction.echo
            icon: lab
            inputs:
              outputs:
                alert: You clicked the interaction button.

          menu/example:
            label: Menu
            icon: chevron-down
            uri: cerb:automation:cerb.interaction.echo
            items:
              interaction/item1:
                label: Item #1
                uri: cerb:automation:cerb.interaction.echo
                inputs:
                  outputs:
                    alert: You clicked menu item #1.
              interaction/item2:
                label: Item #2
                uri: cerb:automation:cerb.interaction.echo
                inputs:
                  outputs:
                    alert: You clicked menu item #2.

        is_popup: 0
  workspace_widget/widget_map_world_countries_with_capital_cities:
    fields:
      label: Map: World Countries with Capital Cities
      tab_id: {{records.tab_workspaces.id}}
      extension_id: cerb.workspace.widget.map.geopoints
      pos@int: 10
      width_units@int: 2
      zone: content
      params:
        map_kata@text:
          map:
            resource:
              uri: cerb:resource:map.world.countries
            projection:
              type: mercator
              scale: 90
              center:
                longitude: 0
                latitude: 25
            points:
              resource:
                #uri: cerb:resource:mapPoints.usaStateCapitals
                uri: cerb:resource:mapPoints.worldCapitalCities

        automation:
          map_clicked@text:
  workspace_widget/widget_record_fields_current_worker:
    fields:
      label: Record Fields: Current Worker
      tab_id: {{records.tab_workspaces.id}}
      extension_id: core.workspace.widget.record.fields
      pos@int: 11
      width_units@int: 2
      zone: content
      params:
        context: cerberusweb.contexts.worker
        context_id@raw: {{current_worker_id}}
        properties@json:
          [["name","email","location","title","gender","is_mfa_required","is_superuser","mention_name","mobile","phone","language","timezone","calendar_id","id"]]
        toolbar_kata@text:
  workspace_widget/widget_sheet_active_workers:
    fields:
      label: Sheet: Active Workers
      tab_id: {{records.tab_workspaces.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 12
      width_units@int: 2
      zone: content
      params:
        data_query@text:
          type:worklist.records
          of:worker
          query:(isDisabled:no lastActivity:"-15 mins")
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@raw:
          layout:
            style: table
            headings@bool: yes
            paging@bool: yes
            #title_column: _label

          columns:
            card/_label:
              label: Worker
              params:
                image@bool: yes
                bold@bool: yes
            text/title:
              label: Title

            text/location:
              label: Location

            text/local_time:
              label: Local time
              params:
                value_template@raw:
                  {{'now'|date('h:ia', timezone)}}


        toolbar_kata@text:
  workspace_widget/widget_worklist_open_tickets:
    fields:
      label: Worklist: Open Tickets
      tab_id: {{records.tab_workspaces.id}}
      extension_id: core.workspace.widget.worklist
      pos@int: 13
      width_units@int: 2
      zone: content
      params:
        context: cerberusweb.contexts.ticket
        query_required: status:o
        query@text:
        render_limit: 10
        header_color: #6a87db
        columns@list:
          t_last_wrote_address_id
          t_group_id
          t_bucket_id
          t_owner_id
          t_updated_date
  workspace_tab/tab_sheets:
    fields:
      name: Sheets
      page_id: {{records.page_tutorial.id}}
      extension_id: core.workspace.tab.dashboard
      pos@int: 14
      params:
        layout@text:
        prompts_kata@text:
      options_kata@raw: locked@bool: yes
  workspace_widget/widget_sheets:
    fields:
      label: Sheets
      tab_id: {{records.tab_sheets.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 1
      width_units@int: 2
      zone: content
      params:
        data_query@text:
          type:sample.records
          records:(help:())
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@text:
          layout:
            style: fieldsets
            headings@bool: no
            paging@bool: no
            filtering@bool: no

          columns:
            markdown/text:
              params:
                text_size@raw: 120%
                value@text:
                  **Sheets** are a modern, automation-friendly data visualization that avoids the schematic rigidity of [**worklists**](https://cerb.ai/docs/worklists/). A sheet is still a collection of rows and columns, but its column are defined in a fully customizable [KATA](https://cerb.ai/docs/kata/)-based text schema. This text-based schema can live within a bot behavior or widget without having to be previously defined or saved.

                  Each column in a sheet has a type (e.g. card, date, text) with configurable options.

                  A _cell_ (the intersection of a specific row and column) doesn't have to relate to a schema field at all -- it can be a synthetic or computed value, translation, interactive element, deep-linked field, arbitrary output, etc.

                  Sheets use placeholder dictionaries to to render cells, and they receive their input from any data query that can generate dictionaries -- including [worklist.subtotals](https://cerb.ai/docs/data-queries/worklist/subtotals/) and a new [worklist.records](https://cerb.ai/docs/data-queries/worklist/records/) data query type that significantly simplifies fetching record data. This means that sheets can also easily format and display data from third-party APIs. The data query itself, being text, supports placeholders and bot scripting logic -- so you can determine which columns are available, or what a cell displays, based not only on aspects of the record, but also based on on who is looking at it, their permissions, etc.

                  State on sheets is maintained client-side, and paging/sorting/filtering is customized for the use case (e.g. bot interaction vs portal vs dashboard widget) -- essentially just passing simple information to the input data query.

        toolbar_kata@text:
  workspace_widget/widget_column_types:
    fields:
      label: Column Types
      tab_id: {{records.tab_sheets.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 2
      width_units@int: 2
      zone: content
      params:
        data_query@raw:
          type:sample.records
          records:(
            example:(
              worker__context: worker
              worker_id:{{current_worker_id}}
              date:{{'now'|date('U')}}
              slider:75
              priority:"Emergency"
              seconds:3944
            )
          )
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@raw:
          layout:
            style: fieldsets
            headings@bool: yes
            paging@bool: no
            filtering@bool: no
            colors:
              rainbow6@csv: #6e40aa, #ee4395, #ff8c38, #aff05b, #28ea8d, #2f96e0

          columns:
            card/worker_id:
              label: Card
              params:
                context: worker
                id_key: worker_id
                label_template@raw: {{worker__label}}
                image@bool: yes
                underline: false

            date/date:
              label: Date
              params:
                format: d-M-Y H:i:s T

            icon/icon:
              label: Icon
              params:
                image: circle-ok

            interaction/interaction:
              label: Interaction
              params:
                text: Start interaction
                uri: cerb:automation:cerb.interaction.echo
                inputs:
                  outputs:
                    alert: You clicked the interaction!

            link/link:
              label: Link
              params:
                href_template@raw: {{cerb_url('c=profiles&a=worker&who=me')}}
                text_template@raw: {{worker_first_name}}'s profile page

            markdown/markdown:
              label: Markdown
              params:
                value_template@raw:
                  ||
                  |:-|:-
                  | **Name:** | [{{worker__label}}]({{worker_record_url}})
                  | **Title:** | _{{worker_title}}_
                  | **Email:** | {{worker_address_address}}

            search_button/search_button:
              label: Search Button
              params:
                context: ticket
                query_template: status:o

            search/search:
              label: Search
              params:
                context: group
                label_template@raw: {{worker_first_name}}'s {{worker_groups|length}} group memberships
                query_template@raw: member:(id:{{worker_id}})

            slider/slider:
              label: Slider
              params:
                min: 0
                max: 100
                value_key: slider

            text/text:
              label: Text
              params:
                bold@bool: yes
                text_color@raw: rainbow6:1
                icon:
                  image: warning-sign
                value_template@raw: {{priority}}

            time_elapsed/time_elapsed:
              label: Time Elapsed
              params:
                value_template@raw: {{seconds}}
                precision@int: 3

            toolbar/toolbar:
              label: Toolbar
              params:
                kata:
                  interaction/alert:
                    label: Alert
                    icon: circle-exclamation-mark
                    uri: cerb:automation:cerb.interaction.echo
                    inputs:
                      outputs:
                        alert: You clicked the button!
                    after:
                      refresh_widgets@bool: no
        toolbar_kata@text:
  workspace_widget/widget_table_layout_with_records_from_a_data_query:
    fields:
      label: Table Layout with Records from a Data Query
      tab_id: {{records.tab_sheets.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 3
      width_units@int: 4
      zone: content
      params:
        data_query@text:
          type:worklist.records
          of:ticket
          query:(status:open limit:5)
          expand:[initial_message_sender_org_,owner_]
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@raw:
          layout:
            style: table
            headings: yes
            paging: yes
            title_column: _label

          columns:
            card/_label:
              label: Ticket
              params:
                bold@bool: no

            card/initial_message_sender__label:
              label: Requester
              params:
                underline@bool: no

            text/status:
              label: Status

            card/group__label:
              label: Group / Bucket
              params:
                icon:
                  record_uri@raw: cerb:group:{{group_id}}
                label_template@raw: {{group__label}} / {{bucket__label}}
                context: bucket
                id_template@raw: {{bucket_id}}
                underline@bool: no

            card/owner__label:
              label: Owner
              params:
                image: yes
                underline@bool: no

            slider/importance:

            date/updated:
              label: Updated
              params:
                format: Y-m-d
        toolbar_kata@text:
  workspace_widget/widget_dynamic_sheet_colors:
    fields:
      label: Dynamic Sheet Colors
      tab_id: {{records.tab_sheets.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 4
      width_units@int: 2
      zone: content
      params:
        data_query@text:
          type:sample.records
          records:(
            emergency:(subject:"Help! I'm locked out of my account" priority:"Emergency")
            high:(subject:"Your SSL certificate expires tomorrow" priority:"High")
            normal:(subject:"I have a question about pricing" priority:"Normal")
            low:(subject:"The latest PHP programming news" priority:"Low")
          )
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@raw:
          layout:
            style: table
            headings@bool: yes
            paging@bool: yes
            colors:
              priorities@csv: #FF0000, #FF9900
              text@csv: #FFFFFF

          columns:
            text/subject:
              label: Ticket
              params:
                bold@bool: yes
                text_color@raw: rainbow12:{{random(0,11)}}
            text/priority:
              label: Priority
              params:
                color@raw: priorities:{{{'Emergency':0,'High':1}[priority]}}
                text_color@raw: {% if priority in ['Emergency','High'] %}text{% endif %}
        toolbar_kata@text:
  workspace_widget/widget_fieldsets_layout_with_text_sizing:
    fields:
      label: Fieldsets Layout with Text Sizing
      tab_id: {{records.tab_sheets.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 5
      width_units@int: 2
      zone: content
      params:
        data_query@raw:
          type:worklist.records
          of:worker
          expand: [custom_,]
          query:(
            id:{{current_worker_id}}
            limit:1
            sort:[id]
          )
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@raw:
          layout:
            style: fieldsets
            headings@bool: yes
            paging@bool: no
            title_column: _label

          columns:
            card/_label:
              label: Worker
              params:
                text_size@raw: 175%
                image@bool: yes
                bold@bool: yes
                underline@bool: no
            text/title:
            text/at_mention_name:
              label: Mention
              params:
                value_template@raw: @{{at_mention_name}}
            text/location:
            text/timezone:
            search_button/groups:
              label: Tickets Owned
              params:
                context: ticket
                query: owner.id:{{id}} status:[open,waiting]
        toolbar_kata@text:
  workspace_widget/widget_grid_layout_with_images_and_text_sizing:
    fields:
      label: Grid Layout with Images and Text Sizing
      tab_id: {{records.tab_sheets.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 6
      width_units@int: 4
      zone: content
      params:
        data_query@text:
          type:worklist.records
          of:worker
          expand: [custom_,]
          query:(
            limit:10
            sort:[firstName,lastName]
          )
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@raw:
          layout:
            style: grid
            headings@bool: yes
            paging@bool: yes
            title_column: image

          columns:
            icon/image:
              params:
                text_size@raw: 500%
                record_uri@raw: cerb:worker:{{id}}

            card/_label:
              label: Worker
              params:
                text_size@raw: 150%
                image@bool: no
                bold@bool: yes
            text/title:
            text/at_mention_name:
              label: Mention
              params:
                value_template@raw: {% if at_mention_name %}@{{at_mention_name}}{% endif %}
            text/location:
            text/timezone:
        toolbar_kata@text:
  workspace_widget/widget_single_or_multiple_row_selection_with_dynamic_exclusion:
    fields:
      label: Single or Multiple Row Selection with Dynamic Exclusion
      tab_id: {{records.tab_sheets.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 7
      width_units@int: 2
      zone: content
      params:
        data_query@text:
          type:sample.records
          records:(
            0:(id:r color:Red)
            1:(id:g color:Green)
            2:(id:b color:Blue)
            3:(id:na color:"(Not Selectable)")
            4:(id:w color:White)
            5:(id:k color:Black)
          )
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@raw:
          layout:
            style: table
            headings@bool: no
            paging@bool: yes

          columns:
            selection/id:
              params:
                #mode: multiple
                mode: single
                selectable@raw: {{id != 'na'}}

            text/color:
              label: Color

        toolbar_kata@text:
  workspace_tab/tab_charts:
    fields:
      name: Charts
      page_id: {{records.page_tutorial.id}}
      extension_id: core.workspace.tab.dashboard
      pos@int: 15
      params:
        layout@text:
        prompts_kata@text:
      options_kata@raw: locked@bool: yes
  workspace_widget/widget_charts:
    fields:
      label: Charts
      tab_id: {{records.tab_charts.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 1
      width_units@int: 2
      zone: content
      params:
        data_query@text:
          type:sample.records
          records:(example:())
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@text:
          layout:
            style: fieldsets
            headings@bool: no
            paging@bool: no
            filtering@bool: no

          columns:
            markdown/instructions:
              params:
                text_size@raw: 120%
                value@text:
                  A [Chart KATA](https://cerb.ai/docs/dashboards/widgets/chart-kata/) widget can build complex, dynamic charts with mixed visualizations and datasets from multiple sources. The **datasets** and **chart schema** are both defined using a text-based **KATA** dialect.

                  ##### Visualizations

                  ||
                  |-|-
                  | `area`
                  | `area-spline`
                  | `area-step`
                  | `bar`
                  | `donut`
                  | `gauge`
                  | `line`
                  | `pie`
                  | `scatter`
                  | `spline`
                  | `step`
        toolbar_kata@text:
  workspace_widget/widget_datasets:
    fields:
      label: Datasets
      tab_id: {{records.tab_charts.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 2
      width_units@int: 2
      zone: content
      params:
        data_query@text:
          type:sample.records
          records:(example:())
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@text:
          layout:
            style: fieldsets
            headings@bool: no
            paging@bool: no
            filtering@bool: no

          columns:
            markdown/instructions:
              params:
                text_size@raw: 120%
                value@text:
                  A **dataset** is a collection of **series** data. An `/identifier` names the dataset.

                  Each **series** within a dataset has a unique key name containing an array of **values**.

                  For instance, a time-series dataset could include a series named `ts` with timestamps for the x-axis, and a second series named `values` with the y-axis values.

                  ##### Types

                  ||
                  |-|-
                  | **automation:** | Load data from an **automation**. Almost anything is possible here.
                  | **dataQuery:** | Load data from a **data query**.
                  | **manual:** | Static data. This is primarily useful in **interactions** where some chart data has already been loaded.

        toolbar_kata@text:
  workspace_widget/widget_time_series_stacked_bar_of_tickets_created_12mo:
    fields:
      label: Time Series: Stacked bar of tickets created (12mo)
      tab_id: {{records.tab_charts.id}}
      extension_id: cerb.workspace.widget.chart.kata
      pos@int: 3
      width_units@int: 4
      zone: content
      params:
        datasets_kata@text:
          dataQuery/tickets:
            query@text:
              type:sample.timeseries
              x.count:12
              x.unit:months
              series.support:(
                label:"Support"
                y.min:1000
                y.max:10000
                trend:up
              )
              series.sales:(
                label:"Sales"
                y.min:500
                y.max:5000
                trend:random
              )
              series.dev:(
                label:"Development"
                y.min:500
                y.max:5000
                trend:random
              )
        placeholder_simulator_kata@text:
        chart_kata@text:
          data:
            type: bar
            series:
              tickets:
                x_key: ts
            stacks:
              0@csv: tickets

          axis:
            x:
              type: timeseries
              tick:
                format: %B '%y

          tooltip:
            grouped@bool: no
  workspace_widget/widget_line_tickets_created_by_year:
    fields:
      label: Line: Tickets created by year
      tab_id: {{records.tab_charts.id}}
      extension_id: cerb.workspace.widget.chart.kata
      pos@int: 4
      width_units@int: 4
      zone: content
      params:
        datasets_kata@text:
          dataQuery/tickets:
            query@text:
              type:sample.timeseries
              x.count:5
              x.unit:years
              series.created_tickets:(
                label:"# Tickets"
                y.min:1000
                y.max:100000
                trend:up
              )
        placeholder_simulator_kata@text:
        chart_kata@text:
          data:
            type: line
            series:
              tickets:
                x_key: ts
                name: Tickets

          axis:
            x:
              type: timeseries
              tick:
                format: %Y

          tooltip:
            grouped@bool: no
  workspace_widget/widget_bar_categories_messages_sent_per_worker_by_group:
    fields:
      label: Bar Categories: Messages sent per worker by group
      tab_id: {{records.tab_charts.id}}
      extension_id: cerb.workspace.widget.chart.kata
      pos@int: 5
      width_units@int: 4
      zone: content
      params:
        datasets_kata@text:
          dataQuery/messages:
            query@text:
              type:worklist.subtotals
              of:message
              by:[worker~25,group~25]
              query:(
                created:"-1 year to now"
                isOutgoing:y
                isBroadcast:n
                worker:(isDisabled:n id:>0)
              )
              format:categories
        placeholder_simulator_kata@text:
        chart_kata@text:
          color:
            patterns:
              category10@csv: #1f77b4, #ff7f0e, #2ca02c, #d62728, #9467bd, #8c564b, #e377c2, #7f7f7f, #bcbd22, #17becf

          data:
            type: bar
            series:
              messages:
                x_key: label
                color_pattern: category10
            stacks:
              0@csv: messages

          axis:
            rotated@bool: yes
            x:
              type: category
              tick:
                rotate: -90
                multiline@bool: no
                fit@bool: no
  workspace_widget/widget_bar_categories_tickets_by_day_of_week_past_12mo:
    fields:
      label: Bar Categories: Tickets by Day of Week (Past 12mo)
      tab_id: {{records.tab_charts.id}}
      extension_id: cerb.workspace.widget.chart.categories
      pos@int: 6
      width_units@int: 4
      zone: content
      params:
        data_query@text:
          type:worklist.subtotals
          of:ticket
          by:[created@dayofweek,group]
          query:(created:"today -12 months")
          format:categories
        cache_secs@text:
        xaxis_format: text
        yaxis_format: number
        height@text:
  workspace_widget/widget_donut_open_tickets_by_group:
    fields:
      label: Donut: Open Tickets by Group
      tab_id: {{records.tab_charts.id}}
      extension_id: cerb.workspace.widget.chart.kata
      pos@int: 7
      width_units@int: 4
      zone: content
      params:
        datasets_kata@text:
          dataQuery/tickets:
            query@text:
              type:worklist.subtotals
              of:ticket
              by:[group~20]
              query:(status:o)
              format:pie
        placeholder_simulator_kata@text:
        chart_kata@text:
          color:
            patterns:
              category10@csv: #1f77b4, #ff7f0e, #2ca02c, #d62728, #9467bd, #8c564b, #e377c2, #7f7f7f, #bcbd22, #17becf
          data:
            type: donut
            series:
              tickets:
                color_pattern: category10
  workspace_widget/widget_scatterplot_sla_importance_vs_response_time:
    fields:
      label: Scatterplot: SLA Importance vs. Response Time
      tab_id: {{records.tab_charts.id}}
      extension_id: cerb.workspace.widget.chart.scatterplot
      pos@int: 8
      width_units@int: 4
      zone: content
      params:
        data_query@text:
          type:sample.xy
          series.standard:(
            label:"Standard"
            samples:100
            trend:down
            x.min:120
            x.max:172800
            y.min:0
            y.max:100
          )
          series.enterprise:(
            label:"Enterprise"
            samples:25
            trend:random
            x.min:120
            x.max:86400
            y.min:0
            y.max:100
          )
          format:scatterplot
        cache_secs@text:
        xaxis_label: Response Time
        xaxis_format: number.seconds
        yaxis_label: Importance
        yaxis_format: number
        height@text:
  workspace_tab/tab_maps:
    fields:
      name: Maps
      page_id: {{records.page_tutorial.id}}
      extension_id: core.workspace.tab.dashboard
      pos@int: 16
      params:
        layout@text:
        prompts_kata@text:
      options_kata@raw: locked@bool: yes
  workspace_widget/widget_world_countries_with_capital_cities:
    fields:
      label: World Countries with Capital Cities
      tab_id: {{records.tab_maps.id}}
      extension_id: cerb.workspace.widget.map.geopoints
      pos@int: 1
      width_units@int: 4
      zone: content
      params:
        map_kata@text:
          map:
            resource:
              uri: cerb:resource:map.world.countries
            projection:
              type: mercator
              scale: 90
              center:
                longitude: 0
                latitude: 25
            points:
              resource:
                uri: cerb:resource:mapPoints.worldCapitalCities

        automation:
          map_clicked@text:
  workspace_widget/widget_world_countries_with_region_colorization:
    fields:
      label: World Countries with Region Colorization
      tab_id: {{records.tab_maps.id}}
      extension_id: cerb.workspace.widget.map.geopoints
      pos@int: 2
      width_units@int: 4
      zone: content
      params:
        map_kata@text:
          map:
            resource:
              uri: cerb:resource:map.world.countries
            projection:
              type: mercator
              scale: 90
              center:
                longitude: 0
                latitude: 25
            regions:
              fill:
                color_map:
                  property: mapcolor13
                  colors:
                    1: rgb(208, 208, 208)
                    2: rgb(193, 193, 193)
                    3: rgb(179, 179, 179)
                    4: rgb(164, 164, 164)
                    5: rgb(150, 150, 150)
                    6: rgb(136, 136, 136)
                    7: rgb(123, 123, 123)
                    8: rgb(109, 109, 109)
                    9: rgb(96, 96, 96)
                    10: rgb(83, 83, 83)
                    11: rgb(71, 71, 71)
                    12: rgb(59, 59, 59)
                    13: rgb(47, 47, 47)
        automation:
          map_clicked@text:
            automation/62ayxq:
              uri: cerb:automation:cerb.map.clicked.sheet
              disabled@bool: {{feature_type != 'point' ? 'yes'}}
              inputs:
                sheet:
                  layout:
                    title_column: name
                  columns:
                    card/name:
                      params:
                        context: org
                        id_key: id
                        label_key: name
                    text/state:
                    text/country:
  workspace_widget/widget_north_american_countries_with_capital_cities:
    fields:
      label: North American Countries with Capital Cities
      tab_id: {{records.tab_maps.id}}
      extension_id: cerb.workspace.widget.map.geopoints
      pos@int: 3
      width_units@int: 4
      zone: content
      params:
        map_kata@text:
          map:
            resource:
              uri: cerb:resource:map.world.countries
            projection:
              type: mercator
              scale: 175
              center:
                longitude: -102
                latitude: 52
            regions:
              label:
                properties:
                  name:
                  pop_est:
                    format: number
                  lastcensus:
              filter:
                property: continent
                is: North America
            points:
              resource:
                uri: cerb:resource:mapPoints.worldCapitalCities
              filter:
                property: continent
                is: North America

        automation:
          map_clicked@text:
  workspace_widget/widget_us_states_with_capital_cities_and_highlights:
    fields:
      label: U.S. States with Capital Cities and highlights
      tab_id: {{records.tab_maps.id}}
      extension_id: cerb.workspace.widget.map.geopoints
      pos@int: 4
      width_units@int: 4
      zone: content
      params:
        map_kata@text:
          map:
            resource:
              uri: cerb:resource:map.country.usa.states
            projection:
              type: albersUsa
              scale: 600
            regions:
              label:
                title: name
              fill:
                color_map:
                  property: name
                  colors:
                    California: blue
                    Texas: red
            points:
              resource:
                uri: cerb:resource:mapPoints.usaStateCapitals
        automation:
          map_clicked@text:
  workspace_widget/widget_us_counties_with_washington_dc_and_the_state_of_wyoming_highlighted:
    fields:
      label: U.S. Counties with Washington D.C. and the state of Wyoming highlighted
      tab_id: {{records.tab_maps.id}}
      extension_id: cerb.workspace.widget.map.geopoints
      pos@int: 5
      width_units@int: 4
      zone: content
      params:
        map_kata@text:
          map:
            resource:
              uri: cerb:resource:map.country.usa.counties
            projection:
              type: albersUsa
              scale: 600
            regions:
              label:
                properties:
                  county:
                  state:
              fill:
                color_map:
                  property: state
                  colors:
                    Wyoming: purple
            points:
              resource:
                uri: cerb:resource:mapPoints.worldCapitalCities
              filter:
                property: iso_a2
                is: US

        automation:
          map_clicked@text:
  workspace_widget/widget_us_state_of_california_counties_with_la_highlighted:
    fields:
      label: U.S. State of California counties with L.A. highlighted
      tab_id: {{records.tab_maps.id}}
      extension_id: cerb.workspace.widget.map.geopoints
      pos@int: 6
      width_units@int: 2
      zone: content
      params:
        map_kata@text:
          map:
            resource:
              uri: cerb:resource:map.country.usa.counties
            projection:
              type: mercator
              scale: 1500
              center:
                longitude: -119.7462
                latitude: 37.5
            regions:
              fill:
                color_map:
                  property: county
                  colors@json:
                    {"Los Angeles": "blue"}
              filter:
                property: state
                is: California
        automation:
          map_clicked@text:
  workspace_widget/widget_us_state_of_texas_counties_with_dallas_highlighted:
    fields:
      label: U.S. State of Texas counties with Dallas highlighted
      tab_id: {{records.tab_maps.id}}
      extension_id: cerb.workspace.widget.map.geopoints
      pos@int: 7
      width_units@int: 2
      zone: content
      params:
        map_kata@text:
          map:
            resource:
              uri: cerb:resource:map.country.usa.counties
            projection:
              type: mercator
              scale: 1327
              center:
                longitude: -98.0785
                latitude: 30.9578
            regions:
              filter:
                property: state
                is: Texas
            points:
              data:
                point/dallas:
                  latitude: 32.80574473290688
                  longitude: -96.78955078125
                  properties:
                    name: Dallas

        automation:
          map_clicked@text:
  workspace_widget/widget_european_countries_with_capital_cities_and_germany_highlighted:
    fields:
      label: European Countries with Capital Cities and Germany highlighted
      tab_id: {{records.tab_maps.id}}
      extension_id: cerb.workspace.widget.map.geopoints
      pos@int: 8
      width_units@int: 4
      zone: content
      params:
        map_kata@text:
          map:
            resource:
              uri: cerb:resource:map.world.countries
            projection:
              type: mercator
              scale: 268
              center:
                longitude: 21.2199
                latitude: 56.8320
            regions:
              label:
                title: name
              filter:
                property: continent
                is: Europe
              fill:
                color_map:
                  property: name
                  colors:
                    Germany: orange
            points:
              resource:
                uri: cerb:resource:mapPoints.worldCapitalCities
              filter:
                property: continent
                is: Europe
        automation:
          map_clicked@text:
  workspace_widget/widget_asian_countries_with_capital_cities_and_china_highlighted:
    fields:
      label: Asian Countries with Capital Cities and China highlighted
      tab_id: {{records.tab_maps.id}}
      extension_id: cerb.workspace.widget.map.geopoints
      pos@int: 9
      width_units@int: 4
      zone: content
      params:
        map_kata@text:
          map:
            resource:
              uri: cerb:resource:map.world.countries
            projection:
              type: mercator
              scale: 240
              center:
                longitude: 89.4166
                latitude: 27.2244
            regions:
              filter:
                property: continent
                is: Asia
              fill:
                color_map:
                  property: name
                  colors:
                    China: red

            points:
              resource:
                uri: cerb:resource:mapPoints.worldCapitalCities
              filter:
                property: continent
                is: Asia

        automation:
          map_clicked@text:
  workspace_widget/widget_south_american_countries_with_population_choropleth:
    fields:
      label: South American Countries with Population Choropleth
      tab_id: {{records.tab_maps.id}}
      extension_id: cerb.workspace.widget.map.geopoints
      pos@int: 10
      width_units@int: 4
      zone: content
      params:
        map_kata@text:
          map:
            resource:
              uri: cerb:resource:map.world.countries
            projection:
              type: mercator
              scale: 220
              center:
                longitude: -55
                latitude: -24
            regions:
              label:
                properties:
                  name:
                  pop_est:
                    format: number
                  lastcensus:
              filter:
                property: continent
                is: South America
              fill:
                choropleth:
                  property: pop_est
                  classes: 8
            points:
              resource:
                uri: cerb:resource:mapPoints.worldCapitalCities
              filter:
                property: continent
                is: South America

        automation:
          map_clicked@text:
  workspace_widget/widget_africa_with_population_choropleth:
    fields:
      label: Africa with Population choropleth
      tab_id: {{records.tab_maps.id}}
      extension_id: cerb.workspace.widget.map.geopoints
      pos@int: 11
      width_units@int: 4
      zone: content
      params:
        map_kata@text:
          map:
            resource:
              uri: cerb:resource:map.world.countries
            projection:
              type: naturalEarth
              scale: 250
              center:
                longitude: 15
                latitude: 2
            regions:
              label:
                properties:
                  name:
                  pop_est:
                    format: number
                  lastcensus:
              filter:
                property: continent
                is: Africa
              fill:
                choropleth:
                  property: pop_est
                  classes: 8
            points:
              resource:
                uri: cerb:resource:mapPoints.worldCapitalCities
              filter:
                property: continent
                is: Africa

        automation:
          map_clicked@text:
  workspace_widget/widget_oceanian_countries_with_capital_cities:
    fields:
      label: Oceanian Countries with Capital Cities
      tab_id: {{records.tab_maps.id}}
      extension_id: cerb.workspace.widget.map.geopoints
      pos@int: 12
      width_units@int: 4
      zone: content
      params:
        map_kata@text:
          map:
            resource:
              uri: cerb:resource:map.world.countries
            projection:
              type: mercator
              scale: 300
              center:
                longitude: 140
                latitude: -24.15
            regions:
              label:
                title: name
              filter:
                property: continent
                is: Oceania
            points:
              resource:
                uri: cerb:resource:mapPoints.worldCapitalCities
              filter:
                property: continent
                is: Oceania

        automation:
          map_clicked@text:
  workspace_tab/tab_automations:
    fields:
      name: Automations
      page_id: {{records.page_tutorial.id}}
      extension_id: core.workspace.tab.dashboard
      pos@int: 17
      params:
        layout@text:
        prompts_kata@text:
      options_kata@raw: locked@bool: yes
  workspace_widget/widget_automations:
    fields:
      label: Automations
      tab_id: {{records.tab_automations.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 1
      width_units@int: 2
      zone: content
      params:
        data_query@text:
          type:sample.records
          records:(example:())
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@raw:
          layout:
            style: fieldsets
            headings@bool: no
            paging@bool: no
            filtering@bool: no

          columns:
            markdown/instructions:
              params:
                text_size@raw: 120%
                value@raw:
                  [**Automations**](https://cerb.ai/docs/automations/) are self-contained state machines written in [**KATA**](https://cerb.ai/docs/kata/) that transform an input dictionary into an output dictionary. The results are used to automate and customize workflows throughout Cerb.

                  This simple automation:

                  ```cerb
                  start:
                    return:
                      answer: {{a * b}}
                  ```

                  With this input:

                  ```cerb
                  a: 5
                  b: 4
                  ```

                  Returns this output:

                  ```
                  answer: 20
                  ```
        toolbar_kata@text:
  workspace_widget/widget_list_of_automation_events:
    fields:
      label: List of Automation Events
      tab_id: {{records.tab_automations.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 2
      width_units@int: 2
      zone: content
      params:
        data_query@text:
          type:worklist.records
          of:automation_event
          query:(sort:name limit:25)
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@text:
          layout:
            style: columns
            headings@bool: no
            paging@bool: yes
            filtering@bool: no

          columns:
            card/_label:
              params:
                text_size@raw: 125%
                bold@bool: yes
            text/description:
        toolbar_kata@text:
  workspace_widget/widget_dictionaries:
    fields:
      label: Dictionaries
      tab_id: {{records.tab_automations.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 3
      width_units@int: 2
      zone: content
      params:
        data_query@text:
          type:sample.records
          records:(example:())
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@text:
          layout:
            style: fieldsets
            headings@bool: no
            paging@bool: no
            filtering@bool: no

          columns:
            markdown/instructions:
              params:
                text_size@raw: 120%
                value@raw:
                  A **dictionary** is simply a set of **keys** with corresponding **values**. Keys are a name that ends with a colon (`:`). Values are units of data like text, numbers, arrays (lists), booleans (true/false), or dictionaries.

                  The input and output in the previous automation example are dictionaries.

                  The input dictionary has a key `a:` with the value `5`, and a key `b:` with the value `4`.

                  The output dictionary has a key `answer:` with the value `20`.

                  In [KATA](https://cerb.ai/docs/kata/), indenting keys with spaces creates a hierarchy of parent/child relationships. `start:` has a child `return:` which has a child `answer:`.

                  There is a unique **key path** to any key. In the example above, `start:return:answer:` is the path to the key containing the answer. These paths are used by visualizations and error messages to refer to a specific point in a KATA document.

                  The purpose of an automation is to transform an input dictionary into an output dictionary. Depending on where an automation is used, there are different expected inputs and outputs.

                  When an automation executes, it creates a new **working memory** dictionary that starts as a copy of its input. Within this dictionary an automation can store, retrieve, and manipulate data using keys.

        toolbar_kata@text:
  workspace_widget/widget_dialects:
    fields:
      label: Dialects
      tab_id: {{records.tab_automations.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 4
      width_units@int: 2
      zone: content
      params:
        data_query@text:
          type:sample.records
          records:(example:())
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@text:
          layout:
            style: fieldsets
            headings@bool: no
            paging@bool: no
            filtering@bool: no

          columns:
            markdown/instructions:
              params:
                text_size@raw: 120%
                value@raw:
                  There are various **dialects** of KATA: automations, [maps](https://cerb.ai/docs/maps/), [toolbars](https://cerb.ai/docs/toolbars/), [events](https://cerb.ai/docs/automations/#events), etc. The dialects share the same overall [syntax](https://cerb.ai/docs/kata/), but each has a different **vocabulary** of keys.

                  In automations, keys describe a _declarative_ set of **commands**. In other words, an automation serves as a natural language outline of logic and actions to be undertaken, rather than a set of detailed computer programming instructions for carrying out each step.

                  For instance, the command [http.request:](https://cerb.ai/docs/automations/commands/http.request/) fetches a web page by URL and save its status code, headers, and body to a given key in the dictionary.
        toolbar_kata@text:
  workspace_widget/widget_scripting:
    fields:
      label: Scripting
      tab_id: {{records.tab_automations.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 5
      width_units@int: 2
      zone: content
      params:
        data_query@text:
          type:sample.records
          records:(example:())
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@raw:
          layout:
            style: fieldsets
            headings@bool: no
            paging@bool: no
            filtering@bool: no

          columns:
            markdown/instructions:
              params:
                text_size@raw: 120%
                value@raw:
                  Values can be _dynamically_ generated from the output of **scripting**.

                  In the previous examples we had this line:

                  ```
                  answer: {{a * b}}
                  ```

                  This computes a new value by multiplying the value in placeholder `a` by the value in placeholder `b`.

                  Commands use the syntax:

                  ```
                  {% for n in 1..5 %}
                  {{n}}
                  {% endfor %}
                  ```

                  And hidden code comments:

                  ```
                  {# This is a comment #}
                  ```

                  In scripts, you can refer to any key from the working memory dictionary, which are often referred to as **placeholders** to avoid ambiguity with keys in KATA documents.

                  Scripting provides several [functions](https://cerb.ai/docs/scripting/functions/) and [filters](https://cerb.ai/docs/scripting/filters/) for quickly formatting and manipulating data.

                  Refer to the [**scripting**](https://cerb.ai/docs/scripting/) documentation for a full list of capabilities.
        toolbar_kata@text:
  workspace_widget/widget_annotations:
    fields:
      label: Annotations
      tab_id: {{records.tab_automations.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 6
      width_units@int: 2
      zone: content
      params:
        data_query@text:
          type:sample.records
          records:(example:())
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@raw:
          layout:
            style: fieldsets
            headings@bool: no
            paging@bool: no
            filtering@bool: no

          columns:
            markdown/instructions:
              params:
                text_size@raw: 120%
                value@raw:
                  In KATA, all values that immediately follow a key are assumed to be text by default:

                  ```
                  a: 5
                  b: 4
                  ```

                  In the example above, `5` and `4` are treated as text rather than numbers. However, in certain situations, like mathematical operations, a text value can be automatically **coerced** into a number.

                  KATA stands for **K**ey **A**nnotated **T**ree of **A**ttributes. Annotations are tags on keys with special instructions for handling their value.

                  Annotations start with `@` and are appended to a key name.

                  For example, we can explicitly specify that a key's value is an integer (a non-fractional number) with `@int`:

                  ```
                  start:
                    set:
                      a@int: 5
                      b@int: 4
                    return:
                      answer@int: {{a * b}}
                  ```

                  In the above automation's dictionary, the value for the keys `a:`, `b:`, and `answer:` are now strictly numeric.

                  Annotations are **not** part of a key's name or path. The key path `start:set/a:a:` points to the value `5`.

                  Here are some common annotations:

                  | Annotation |
                  |-|-
                  | **`@base64:`** | Binary data encoded as Base64 text
                  | **`@bit:`** | `0` (`off`, `false`, `no`, `n`) or `1` (any non-false value)
                  | **`@bool:`** | `false` (`no`, `n`, `off`, `0`) or `true` (any non-false value)
                  | **`@csv:`** | An array encoded as comma-separated text
                  | **`@date:`** | A human-readable absolute (`Jan 1 2025 08:00`) or relative (`+2 hours`) date
                  | **`@float:`** | A floating point number
                  | **`@int:`** | A non-fractional number
                  | **`@json:`** | A dictionary encoded as JSON text
                  | **`@kata:`** | A dictionary encoded as KATA text
                  | **`@key:`** | A copy of the value from the given key path
                  | **`@list:`** | An array encoded as a line-delimited text block
                  | **`@optional:`** | Remove the key if the value is empty
                  | **`@text:`** | A multiple line text block
                  | **`@trim:`** | Remove the value's leading and trailing whitespace

                  Multiple annotations may be joined with commas. They are evaluated from left to right.

                  For instance:

                  ```
                  start:
                    set:
                      a: 5
                      b@key,int: a
                    return:
                      answer@int: {{a * b}}
                  ```

                  The line `b@key,int: a` is setting the key `b:` to the value of the `a` key, and then converting it to an integer.

        toolbar_kata@text:
  workspace_widget/widget_list_of_automations:
    fields:
      label: List of Automations
      tab_id: {{records.tab_automations.id}}
      extension_id: core.workspace.widget.worklist
      pos@int: 7
      width_units@int: 4
      zone: content
      params:
        context: cerb.contexts.automation
        query_required@text:
        query: sort:name subtotal:trigger
        render_limit: 15
        header_color: #6a87db
        columns@list:
          a_name
          a_description
          a_extension_id
          a_updated_at
  workspace_tab/tab_interactions:
    fields:
      name: Interactions
      page_id: {{records.page_tutorial.id}}
      extension_id: core.workspace.tab.dashboard
      pos@int: 18
      params:
        layout: halves
        prompts_kata@text:
      options_kata@raw: locked@bool: yes
  workspace_widget/widget_interactions:
    fields:
      label: Interactions
      tab_id: {{records.tab_interactions.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 1
      width_units@int: 4
      zone: left
      params:
        data_query@text:
          type:sample.records
          records:(example:())
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@raw:
          layout:
            style: fieldsets
            headings@bool: no
            paging@bool: no
            filtering@bool: no

          columns:
            markdown/instructions:
              params:
                text_size@raw: 120%
                value@text:
                  [**Interactions**](https://cerb.ai/docs/interactions/) are interactive [automations](https://cerb.ai/docs/automations/) that use [continuations](https://cerb.ai/docs/automations/#continuations) to pause and resume a multi-step workflow.

                  Each time an interaction exits in the `await:` state, it pauses to collect more data before resuming from the same point. The most common source is a web-based `form:`.

                  ```kata
                  start:
                    await/request:
                      form:
                        title: Register
                        elements:
                          text/prompt_name:
                            label: What is your name?
                            required@bool: yes
                            type: freeform
                    await/response:
                      form:
                        elements:
                          say/hello:
                            content@text:
                              Hello, {{prompt_name}}!
                  ```

                  When an interaction concludes in the `return` state, it returns any number of key/value pairs to the caller. Keys may be nested to return dictionaries.

                  Each **caller** has a set of expected return keys to control its behavior.

                  ```cerb
                  return:
                    key1: value1
                    key2: value2
                    ...
                  ```

        toolbar_kata@text:
  workspace_widget/widget_await_form_elements:
    fields:
      label: Await: Form Elements
      tab_id: {{records.tab_interactions.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 1
      width_units@int: 4
      zone: right
      params:
        data_query@text:
          type:sample.records
          records:(
            audio:(
              name:"audio" description:"Play an audio file"
            )
            chart:(
              name:"chart" description:"Render an interactive data visualization"
            )
            chooser:(
              name:"chooser" description:"A search popup for selecting records"
            )
            editor:(
              name:"editor" description:"A code editor with syntax highlighting, autocompletion, and a custom toolbar"
            )
            fileDownload:(
              name:"fileDownload" description:"File download prompt"
            )
            fileUpload:(
              name:"fileUpload" description:"File upload prompt"
            )
            map:(
              name:"map" description:"Interactive map"
            )
            query:(
              name:"query" description:"Search query"
            )
            say:(
              name:"say" description:"Block of text or Markdown"
            )
            sheet:(
              name:"sheet" description:"Sheet with row selection"
            )
            submit:(
              name:"submit" description:"Continue to next step"
            )
            _text:(
              name:"text" description:"Text input with data type validation"
            )
            textarea:(
              name:"textarea" description:"Multiple lines of text"
            )
          )
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@raw:
          layout:
            style: table
            headings@bool: no
            paging@bool: no
            filtering@bool: no
            title_column: name

          columns:
            interaction/name:
              params:
                uri: cerb:automation:ai.cerb.tutorial.interactions.formElements
                inputs:
                  element@raw: {{name}}
                text_template@raw: {{name}}:
                text_size@raw: 125%
                bold@bool: yes
                icon:
                  image: play-button
            text/description:
        toolbar_kata@text:
  workspace_widget/widget_return:
    fields:
      label: Return:
      tab_id: {{records.tab_interactions.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 2
      width_units@int: 4
      zone: right
      params:
        data_query@text:
          type:sample.records
          records:(
            alert:(
              name:"alert" description:"Display a time-limited message at the top of a worker's browser."
            )
            clipboard:(
              name:"clipboard" description:"Copy the given text to the worker's keyboard."
            )
            callout:(
              name:"callout" description:"Point at a specific UI element with a message."
            )
            open_link:(
              name:"open_link" description:"Open a new browser tab with the given URL."
            )
            open_url:(
              name:"open_url" description:"Open the given URL in the current browser tab. "
            )
            snippet:(
              name:"snippet" description:"If the interaction was started from an editor, paste the given text at the cursor."
            )
            timer:(
              name:"timer" description:"Start a time tracking timer with the given time entry record ID."
            )
          )
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@raw:
          layout:
            style: table
            headings@bool: no
            paging@bool: no
            filtering@bool: no
            title_column: name

          columns:
            interaction/name:
              params:
                uri: cerb:automation:ai.cerb.tutorial.interactions.return
                inputs:
                  command@raw: {{name}}
                text_template@raw: {{name}}:
                text_size@raw: 125%
                bold@bool: yes
                icon:
                  image: play-button
            text/description:
        toolbar_kata@text:
  workspace_widget/widget_await:
    fields:
      label: Await:
      tab_id: {{records.tab_interactions.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 2
      width_units@int: 4
      zone: left
      params:
        data_query@text:
          type:sample.records
          records:(
            form:(
              name:"form" description:"Display a web form with the desired elements. The form may prompt for user input, validate it, and set dictionary keys (placeholders) with the responses."
            )
            draft:(
              name:"draft" description:"Open the email editor popup and wait for completion."
            )
            duration:(
              name:"duration" description:"Display a message: and wait until: a given date/time or interval (e.g. 5 seconds)."
            )
            interaction:(
              name:"interaction" description:"Temporarily hand control to another delegate interaction. The interaction resumes at the current point when the delegate exits."
            )
            record:(
              name:"record" description:"Open a record editor popup and wait for completion."
            )
          )
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@raw:
          layout:
            style: table
            headings@bool: no
            paging@bool: no
            filtering@bool: no
            title_column: name

          columns:
            text/name:
              params:
                text_size@raw: 125%
                value_template@raw: {{name}}:
                bold@bool: yes
            text/description:
        toolbar_kata@text:
  workspace_tab/tab_toolbars:
    fields:
      name: Toolbars
      page_id: {{records.page_tutorial.id}}
      extension_id: core.workspace.tab.dashboard
      pos@int: 19
      params:
        layout: halves
        prompts_kata@text:
      options_kata@raw: locked@bool: yes
  workspace_widget/widget_toolbars:
    fields:
      label: Toolbars
      tab_id: {{records.tab_toolbars.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 1
      width_units@int: 2
      zone: left
      params:
        data_query@text:
          type:sample.records
          records:(example:())
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@text:
          layout:
            style: fieldsets
            headings@bool: no
            paging@bool: no
            filtering@bool: no

          columns:
            markdown/instructions:
              params:
                text_size@raw: 120%
                value@text:
                  A **toolbar** is a collection of **interactions** optionally organized into **menus**.

                  Top-level toolbar items are displayed as **buttons**. Items within a menu are displayed as **links**.

                  Add new **toolbar sections** to extend the built-in toolbars throughout Cerb. You can also create your own custom toolbars using dashboard widgets.

                  ```
                  interaction/example:
                    label: Interaction
                    icon: play-button
                    uri: cerb:automation:cerb.interaction.echo
                    inputs:
                      outputs:
                        alert: You clicked the interaction.
                    after:
                      refresh_widgets@bool: no
                  ```
        toolbar_kata@text:
  workspace_widget/widget_list_of_toolbars:
    fields:
      label: List of Built-in Toolbars
      tab_id: {{records.tab_toolbars.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 1
      width_units@int: 4
      zone: right
      params:
        data_query@text:
          type:worklist.records
          of:toolbar
          query:(sort:name limit:25)
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@text:
          layout:
            style: columns
            headings@bool: no
            paging@bool: yes
            filtering@bool: no

          columns:
            card/_label:
              params:
                text_size@raw: 125%
                bold@bool: yes
            text/description:
        toolbar_kata@text:
  workspace_widget/widget_example_toolbar:
    fields:
      label: Example Toolbar
      tab_id: {{records.tab_toolbars.id}}
      extension_id: core.workspace.widget.form_interaction
      pos@int: 2
      width_units@int: 4
      zone: left
      params:
        interactions_kata@text:
          interaction/interaction:
            label: Interaction
            icon: play-button
            uri: cerb:automation:cerb.interaction.echo
            inputs:
              outputs:
                alert: You clicked the interaction.
            after:
              refresh_widgets@bool: no
          menu/menu:
            label: Menu
            icon: chevron-down
            items:
              interaction/item1:
                label: Menu Item 1
                uri: cerb:automation:cerb.interaction.echo
                inputs:
                  outputs:
                    alert: You clicked menu item #1.
                after:
                  refresh_widgets@bool: no
              interaction/item2:
                label: Menu Item 2
                uri: cerb:automation:cerb.interaction.echo
                inputs:
                  outputs:
                    alert: You clicked menu item #2.
                after:
                  refresh_widgets@bool: no
              interaction/item3:
                label: Menu Item 3
                uri: cerb:automation:cerb.interaction.echo
                inputs:
                  outputs:
                    alert: You clicked menu item #3.
                after:
                  refresh_widgets@bool: no

        is_popup: 1
  workspace_tab/tab_pgp_encryption:
    fields:
      name: PGP Encryption
      page_id: {{records.page_tutorial.id}}
      extension_id: core.workspace.tab.dashboard
      pos@int: 20
      params:
        layout: sidebar_left
        prompts_kata@text:
      options_kata@raw: locked@bool: yes
  workspace_widget/widget_list_of_pgp_private_keys:
    fields:
      label: List of PGP Private Keys
      tab_id: {{records.tab_pgp_encryption.id}}
      extension_id: core.workspace.widget.worklist
      pos@int: 1
      width_units@int: 4
      zone: content
      params:
        context: cerb.contexts.gpg.private.key
        query_required@text:
        query: sort:name
        render_limit: 10
        header_color: #6a87db
        columns@list:
          g_name
          g_fingerprint
          g_expires_at
          g_updated_at
  workspace_widget/widget_pgp_encryption:
    fields:
      label: PGP Encryption
      tab_id: {{records.tab_pgp_encryption.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 1
      width_units@int: 4
      zone: sidebar
      params:
        data_query@text:
          type:sample.records
          records:(example:())
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@text:
          layout:
            style: fieldsets
            headings@bool: no
            paging@bool: no
            filtering@bool: no

          columns:
            markdown/instructions:
              params:
                text_size@raw: 120%
                value@raw:
                  * [Generate a PGP key-pair for encryption](https://cerb.ai/guides/mail/encryption/pgp-keypair/)
                  * [Encrypted email communication using OpenPGP](https://cerb.ai/blog/2017/08/17/Encrypted-email/)
        toolbar_kata@text:
  workspace_widget/widget_list_of_pgp_public_keys:
    fields:
      label: List of PGP Public Keys
      tab_id: {{records.tab_pgp_encryption.id}}
      extension_id: core.workspace.widget.worklist
      pos@int: 2
      width_units@int: 4
      zone: content
      params:
        context: cerberusweb.contexts.gpg_public_key
        query_required@text:
        query: sort:name
        render_limit: 10
        header_color: #6a87db
        columns@list:
          g_name
          g_fingerprint
          g_expires_at
          g_updated_at
  workspace_widget/widget_examples:
    fields:
      label: Examples
      tab_id: {{records.tab_pgp_encryption.id}}
      extension_id: core.workspace.widget.form_interaction
      pos@int: 2
      width_units@int: 4
      zone: sidebar
      params:
        interactions_kata@text:
          interaction/encrypt:
            label: Encrypt
            icon: lock
            uri: cerb:automation:ai.cerb.tutorial.pgp
          interaction/decrypt:
            label: Decrypt
            icon: unlock
            uri: cerb:automation:ai.cerb.tutorial.pgp
            inputs:
              mode: decrypt
        is_popup: 1
  workspace_tab/tab_connected_services:
    fields:
      name: Connected Services
      page_id: {{records.page_tutorial.id}}
      extension_id: core.workspace.tab.dashboard
      pos@int: 21
      params:
        layout@text:
        prompts_kata@text:
      options_kata@raw: locked@bool: yes
  workspace_widget/widget_connected_services:
    fields:
      label: Connected Services
      tab_id: {{records.tab_connected_services.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 1
      width_units@int: 2
      zone: content
      params:
        data_query@text:
          type:sample.records
          records:(example:())
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@text:
          layout:
            style: fieldsets
            headings@bool: no
            paging@bool: no
            filtering@bool: no

          columns:
            markdown/instructions:
              params:
                text_size@raw: 120%
                value@text:
                  [**Connected services**](https://cerb.ai/docs/connected-services/) provide authentication, secure storage, and reuse of user credentials for arbitrary third-party services.

                  Services may provide [single sign-on](https://cerb.ai/guides/) (SSO) functionality for authenticating worker logins from a corporate directory.

                  Services may also support the creation of multiple [connected accounts](https://cerb.ai/docs/connected-accounts/) for use in [automations](https://cerb.ai/docs/automations/).

                  Plugins can [implement new service provider types](https://cerb.ai/docs/plugins/extensions/points/cerb.connected_service.provider/).
        toolbar_kata@text:
  workspace_widget/widget_connected_account_auth_methods:
    fields:
      label: Authentication Methods
      tab_id: {{records.tab_connected_services.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 2
      width_units@int: 2
      zone: content
      params:
        data_query@text:
          type:sample.records
          records:(
            api:(
              name:"API Key"
            )
            aws:(
              name:"Amazon Web Services"
            )
            bearer:(
              name:"Bearer Tokens"
            )
            cerb:(
              name:"Cerb API (Legacy Signatures)"
            )
            fb:(
              name:"Facebook Pages"
            )
            http:(
              name:"HTTP Basic Auth"
            )
            ldap:(
              name:"LDAP"
            )
            oauth1:(
              name:"OAuth 1.0a"
            )
            oauth2:(
              name:"OAuth 2.0"
            )
            oidc:(
              name:"OpenID Connect Identity Provider"
            )
            saml:(
              name:"SAML Identity Provider"
            )
          )
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@text:
          layout:
            style: grid
            headings@bool: no
            paging@bool: no
            filtering@bool: no

          columns:
            text/name:
              params:
                bold@bool: yes
                text_size@raw: 125%
        toolbar_kata@text:
  workspace_widget/widget_list_of_connected_services:
    fields:
      label: List of Connected Services
      tab_id: {{records.tab_connected_services.id}}
      extension_id: core.workspace.widget.worklist
      pos@int: 3
      width_units@int: 4
      zone: content
      params:
        context: cerberusweb.contexts.connected_service
        query_required@text:
        query: sort:name
        render_limit: 10
        header_color: #6a87db
        columns@list:
          c_name
          c_uri
          c_extension_id
          c_updated_at
  workspace_widget/widget_list_of_connected_accounts:
    fields:
      label: List of Connected Accounts
      tab_id: {{records.tab_connected_services.id}}
      extension_id: core.workspace.widget.worklist
      pos@int: 4
      width_units@int: 4
      zone: content
      params:
        context: cerberusweb.contexts.connected_account
        query_required@text:
        query: sort:name
        render_limit: 10
        header_color: #6a87db
        columns@list:
          c_name
          c_service_id
          c_uri
          *_owner
          c_updated_at
  workspace_tab/tab_metrics:
    fields:
      name: Metrics
      page_id: {{records.page_tutorial.id}}
      extension_id: core.workspace.tab.dashboard
      pos@int: 22
      params:
        layout@text:
        prompts_kata@text:
      options_kata@raw: locked@bool: yes
  workspace_widget/widget_metrics:
    fields:
      label: Metrics
      tab_id: {{records.tab_metrics.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 1
      width_units@int: 2
      zone: content
      params:
        data_query@text:
          type:sample.records
          records:(example:())
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@text:
          layout:
            style: fieldsets
            headings@bool: no
            paging@bool: no
            filtering@bool: no

          columns:
            markdown/instructions:
              params:
                text_size@raw: 120%
                value@text:
                  [**Metrics**](https://cerb.ai/docs/metrics/) aggregate, store, and compute statistics for time-based data.

                  Each metric has a unique, namespaced identifier (e.g. `cerb.workers.active`) using dot-notation.

                  The `cerb.` prefix is reserved for built-in metrics. You can create your metrics with any other prefix.

                  By convention, the prefix is most often a domain name you own in reverse order (e.g. `com.example.metric.name`) to ensure global uniqueness. This makes it easier to combine and share metrics across multiple Cerb environments.

        toolbar_kata@text:
  workspace_widget/widget_list_of_metrics:
    fields:
      label: List of Metrics
      tab_id: {{records.tab_metrics.id}}
      extension_id: core.workspace.widget.worklist
      pos@int: 2
      width_units@int: 2
      zone: content
      params:
        context: cerb.contexts.metric
        query_required@text:
        query: sort:name
        render_limit: 10
        header_color: #6a87db
        columns@list:
          m_name
          m_description
          m_type
          m_updated_at
  workspace_widget/widget_metric_types:
    fields:
      label: Metric Types
      tab_id: {{records.tab_metrics.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 3
      width_units@int: 2
      zone: content
      params:
        data_query@text:
          type:sample.records
          records:(
            counter:(
              name:Counter
              description:"A value that increments over time (e.g. automation invocations and durations, new tickets received, failed worker logins)"
            )
            gauge:(
              name:Gauge
              description:"A direct reading of a value at a given time (e.g. CPU load, active workers, open tickets per bucket, assignments per worker)"
            )
          )
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@text:
          layout:
            style: columns
            headings@bool: no
            paging@bool: no
            filtering@bool: no

          columns:
            text/name:
              params:
                bold@bool: yes
                text_size@raw: 125%
            text/description:
        toolbar_kata@text:
  workspace_widget/widget_dimensions:
    fields:
      label: Dimensions
      tab_id: {{records.tab_metrics.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 4
      width_units@int: 2
      zone: content
      params:
        data_query@text:
          type:sample.records
          records:(example:())
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@text:
          layout:
            style: fieldsets
            headings@bool: no
            paging@bool: no
            filtering@bool: no

          columns:
            markdown/instructions:
              params:
                text_size@raw: 120%
                value@text:
                  A single metric may be further partitioned by adding up to three optional key/value pairs called **dimensions** to its samples. The possible dimensions are defined ahead of time on the metric, but can be provided in any order with the samples.

                  A dimension is of one of the following types:

                  ||
                  |-|-
                  |`extension`| A platform extension ID (e.g. record type)
                  |`number`| A whole number
                  |`record`| An ID of a given record type
                  |`text`| Any textual value

                  Each unique combination of metric and dimensions can function as a separate metric.

                  For example, the `cerb.tickets.open.elapsed` metric has dimensions for `group_id` and `bucket_id`.

                  When just querying the `cerb.tickets.open.elapsed` metric, the results will combine all dimensions together. The metric could also be queried for any combination of groups, or for a specific set of buckets. These dimensions could be reported independently or compared to each other.

        toolbar_kata@text:
  workspace_widget/widget_metric_automation_invocations:
    fields:
      label: Automation Invocations (Past 24h)
      tab_id: {{records.tab_metrics.id}}
      extension_id: cerb.workspace.widget.chart.kata
      pos@int: 5
      width_units@int: 4
      zone: content
      params:
        datasets_kata@text:
          dataQuery/automations:
            query@text:
              type:metrics.timeseries
              range:"-24 hours"
              period:hour
              series.sum:(
                by:automation_id
                metric:cerb.automation.invocations
                function:sum
              )
              format:timeseries
        placeholder_simulator_kata@text:
        chart_kata@text:
          data:
            type: bar
            series:
              automations:
                x_key: ts
            stacks:
              0@csv: automations

          axis:
            x:
              type: timeseries
              tick:
                format:
                  date:
                    pattern: %-I %p
            y:
              type: linear
  workspace_tab/tab_portals:
    fields:
      name: Portals
      page_id: {{records.page_tutorial.id}}
      extension_id: core.workspace.tab.dashboard
      pos@int: 23
      params:
        layout: sidebar_left
        prompts_kata@text:
      options_kata@raw: locked@bool: yes
  workspace_widget/widget_list_of_portals:
    fields:
      label: List of Portals
      tab_id: {{records.tab_portals.id}}
      extension_id: core.workspace.widget.worklist
      pos@int: 1
      width_units@int: 4
      zone: content
      params:
        context: cerberusweb.contexts.portal
        query_required@text:
        query: sort:name
        render_limit: 15
        header_color: #6a87db
        columns@list:
          ct_name
          ct_extension_id
          ct_uri
          ct_updated_at
  workspace_widget/widget_portals:
    fields:
      label: Portals
      tab_id: {{records.tab_portals.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 1
      width_units@int: 4
      zone: sidebar
      params:
        data_query@text:
          type:sample.records
          records:(example:())
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@text:
          layout:
            style: fieldsets
            headings@bool: no
            paging@bool: no
            filtering@bool: no

          columns:
            markdown/instructions:
              params:
                text_size@raw: 120%
                value@text:
                  **Portals** provide a way to publicly and securely share Cerb data with your customers and partners.  Each portal is a standalone website built on top of Cerb.

                  * [Create a new Support Center community portal](https://cerb.ai/guides/portals/support-center/)
                  * [Build and authenticate a custom API using webhook portals](https://cerb.ai/guides/webhooks/custom-api/)
                  * [Host community portals using Nginx](https://cerb.ai/guides/portals/nginx-proxy/)
        toolbar_kata@text:
  workspace_tab/tab_project_boards:
    fields:
      name: Project Boards
      page_id: {{records.page_tutorial.id}}
      extension_id: core.workspace.tab.dashboard
      pos@int: 24
      params:
        layout@text:
        prompts_kata@text:
      options_kata@raw:
        hidden@bool: {{not cerb_plugin_enabled('cerb.project_boards')}}
        locked@bool: yes
  workspace_widget/widget_project_boards:
    fields:
      label: Project Boards
      tab_id: {{records.tab_project_boards.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 1
      width_units@int: 2
      zone: content
      params:
        data_query@text:
          type:sample.records
          records:(example:())
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@text:
          layout:
            style: fieldsets
            headings@bool: no
            paging@bool: no
            filtering@bool: no

          columns:
            markdown/instructions:
              params:
                text_size@raw: 120%
                value@text:
                  **Project boards** are based on the kanban development process, which itself was derived from improvements to just-in-time production pioneered by Japanese manufacturer Toyota in the 1940s.

                  With kanban, each project has a **board**, and each unit of work in that project is represented by a **card**.  Cards are organized into **columns** on the board based on their stage of completion. Typically, cards move from left to right through the columns of the process.

                  One of the core principles of kanban is limiting the amount of work in progress.  For instance, while there may be a large number of cards in a leftmost column named **"TODO"**, there is an agreed upon limit of 2-3 cards in the next **"In Progress"** column.  Cerb does not enforce these limits for you, but a useful convention is adding the limit to the end of the column name -- like **"In Progress (3)"**.

                  One of the most compelling advantages of the kanban process is its simplicity.  It can be implemented with a physical white board that has been divided into columns, with a stack of index cards (or Post-it&reg; notes) for the tasks.

                  However, Cerb's digital implementation of kanban provides several enhancements:

                  * The project boards are visible to the entire team from anywhere.

                  * An activity log provides a full history of changes to the project and its cards.

                  * [Automations](https://cerb.ai/docs/automations/) can be [triggered](https://cerb.ai/docs/automations/triggers/projectBoard.cardAction/) every time a card is moved into a new column. This can automate field changes, comments, notifications, webhooks, or anything else.

                  * Automations can also [customize the display of cards](https://cerb.ai/docs/automations/triggers/projectBoard.renderCard/) based on dynamic factors like record type, field values, custom fields, and the current column. Cards always show the most recent information available.

        toolbar_kata@text:
  workspace_widget/widget_list_of_project_boards:
    fields:
      label: List of Project Boards
      tab_id: {{records.tab_project_boards.id}}
      extension_id: core.workspace.widget.worklist
      pos@int: 2
      width_units@int: 2
      zone: content
      params:
        context: cerberusweb.contexts.project.board
        query_required@text:
        query: sort:name
        render_limit: 10
        header_color: #6a87db
        columns@list:
          p_name
          p_updated_at
  workspace_tab/tab_snippets:
    fields:
      name: Snippets
      page_id: {{records.page_tutorial.id}}
      extension_id: core.workspace.tab.dashboard
      pos@int: 25
      params:
        layout@text:
        prompts_kata@text:
      options_kata@raw: locked@bool: yes
  workspace_widget/widget_snippets:
    fields:
      label: Snippets
      tab_id: {{records.tab_snippets.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 1
      width_units@int: 2
      zone: content
      params:
        data_query@text:
          type:sample.records
          records:(example:())
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@raw:
          layout:
            style: fieldsets
            headings@bool: no
            paging@bool: no
            filtering@bool: no

          columns:
            markdown/instructions:
              params:
                text_size@raw: 120%
                value@text:
                  [Workers](https://cerb.ai/docs/workers/) and [automations](https://cerb.ai/docs/automations/) can use **snippets** to quickly insert predefined text into messages. You can think of snippets as _copying and pasting_ from a giant shared clipboard.

                  However, unlike the traditional _paste_ action, snippets also support [sophisticated scripting functionality](https://cerb.ai/docs/scripting/) with **placeholders** and **conditional logic**.  This means that the content of a snippet can change based on when and where you use it.

                  In a common use case, an auto-responder message will use placeholders in a snippet like:

                  ```twig
                  Hi **{{first_name}}**,

                  Thanks for contacting us!

                  A new support ticket has been opened in response to your message:

                  Reference #: **{{mask}}**
                  Subject: **{{subject}}**

                  We'll be in contact shortly.
                  ```

                  The above snippet results in the following text when used by an [automation](https://cerb.ai/docs/automations/) on a new ticket:

                  ```text
                  Hi **Charlotte**,

                  Thanks for contacting us!

                  A new support ticket has been opened in response to your message:

                  Reference #: **CRB-01092-002**
                  Subject: **Do you accept purchase orders?**

                  We'll be in contact shortly.
                  ```

        toolbar_kata@text:
  workspace_widget/widget_snippets_prompts:
    fields:
      label: Prompts
      tab_id: {{records.tab_snippets.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 2
      width_units@int: 2
      zone: content
      params:
        data_query@text:
          type:sample.records
          records:(help:())
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@text:
          layout:
            style: fieldsets
            headings@bool: no
            paging@bool: no
            filtering@bool: no

          columns:
            markdown/text:
              params:
                text_size@raw: 120%
                value@text:
                  **Prompts** offer optional dynamic customization of a snippet every time it is used by a worker.

                  ||
                  |-|-
                  |**Checkbox**| A true/false option that can be used to show or hide sections in the snippet.
                  |**Picklist**| A dropdown of pre-defined values.
                  |**Text**| A free-form text entry with single or multiple lines.

                  Prompts are defined using **KATA**:

                  ```cerb
                  checkbox/prompt_checkbox:
                    label: Checkbox:
                    default@bool: yes

                  picklist/prompt_picklist:
                    label: Picklist:
                    default: green
                    params:
                      options@list:
                        red
                        green
                        blue

                  text/prompt_text:
                    label: Text:
                    default: text
                    params:
                      multiple@bool: no
                  ```
        toolbar_kata@text:
  workspace_widget/widget_list_of_snippets:
    fields:
      label: List of Snippets
      tab_id: {{records.tab_snippets.id}}
      extension_id: core.workspace.widget.worklist
      pos@int: 3
      width_units@int: 4
      zone: content
      params:
        context: cerberusweb.contexts.snippet
        query_required@text:
        query: sort:title
        render_limit: 10
        header_color: #6a87db
        columns@list:
          s_title
          s_context
          *_owner
          suh_my_uses
          s_total_uses
          s_updated_at
  workspace_tab/tab_webhooks:
    fields:
      name: Webhooks
      page_id: {{records.page_tutorial.id}}
      extension_id: core.workspace.tab.dashboard
      pos@int: 26
      params:
        layout@text:
        prompts_kata@text:
      options_kata@raw: locked@bool: yes
  workspace_widget/widget_webhooks:
    fields:
      label: Webhooks
      tab_id: {{records.tab_webhooks.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 1
      width_units@int: 2
      zone: content
      params:
        data_query@text:
          type:sample.records
          records:(example:())
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@text:
          layout:
            style: fieldsets
            headings@bool: no
            paging@bool: no
            filtering@bool: no

          columns:
            markdown/instructions:
              params:
                text_size@raw: 120%
                value@text:
                  Many modern apps and services provide [**webhooks**](https://cerb.ai/docs/webhooks/) for real-time _"push notifications"_ about events.  These notifications are usually simple HTTP POSTs with either request parameters or JSON/XML payloads that are sent to a URL you provide.  This is in contrast to the less efficient _"poll"_ approach, where a service is constantly polled at regular intervals to check for new changes.

                  With Cerb's [webhooks plugin](https://cerb.ai/guides/webhooks/configure/) you can build powerful automation behaviors in response to webhooks, entirely from your web browser, and without writing custom code or plugins.

                  Each _webhook listener_ is given a unique URL that is assigned to a specific [automation](https://cerb.ai/docs/automations/).  With that URL in hand, you can simply paste it into the appropriate field in whatever service you're integrating with.  By default, these URLs don't require authentication, but you can enforce any authentication method you need within the automation.
        toolbar_kata@text:
  workspace_widget/widget_webhook_examples:
    fields:
      label: Webhook Examples
      tab_id: {{records.tab_webhooks.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 2
      width_units@int: 2
      zone: content
      params:
        data_query@text:
          type:sample.records
          records:(
            cloudwatch:(
              name:"Amazon CloudWatch"
              description:"Send alerts to a Slack room when any metric or log conditions are met. For instance: HTTP 5XX errors, consecutive failed password attempts, SSH sessions, etc."
            )
            api:(
              name:"Custom API"
              description:"Build and authenticate a custom API using webhook portals"
              url:"https://cerb.ai/guides/webhooks/custom-api/"
            )
            freshbooks:(
              name:"Freshbooks"
              description:"Send invoice and payment notifications to a Slack room."
            )
            github:(
              name:"GitHub"
              description:"Send issue and commit notifications to a Slack room."
            )
            jira:(
              name:"JIRA"
              description:"Send notifications about bounced or dropped messages to a Slack room along with a permalink to the ticket. The bot can also adds a sticky note to the affected messages with the specific error message; and, when appropriate, the recipient is marked as defunct."
            )
            mailgun:(
              name:"Mailgun"
              description:"Send notifications about bounced or dropped messages to a Slack room along with a permalink to the ticket. The bot can also adds a sticky note to the affected messages with the specific error message; and, when appropriate, the recipient is marked as defunct."
            )
            slack:(
              name:"Slack"
              description:"Send slash commands to a Cerb bot"
              url:"https://cerb.ai/guides/integrations/slack/slash-commands/"
            )
            twilio:(
              name:"Twilio"
              description:"Correspond with a Cerb bot through mobile text messages"
              url:"https://cerb.ai/guides/integrations/twilio/"
            )
            zapier:(
              name:"Zapier"
              description:"Zapier helps integrate hundreds of apps and services. You can use their existing 'webhook' action to create new webhooks that ping Cerb bots for thousands of different events. For instance, 'when an RSS feed changes', 'when a new file is added to Dropbox', 'when your brand is mentioned in Google Alerts', 'when a new event is added to your Google Calendar', etc."
            )
          )
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@text:
          layout:
            style: columns
            headings@bool: no
            paging@bool: no
            filtering@bool: no

          columns:
            text/name:
              params:
                bold@bool: yes
                text_size@raw: 125%
            text/description:
            link/url:
              params:
                href_key: url
                text_template@raw: Guide
                href_new_tab@bool: yes
                icon:
                  image: new-window-alt
                  at: end
        toolbar_kata@text:
  workspace_widget/widget_list_of_webhook_listeners:
    fields:
      label: List of Webhook Listeners
      tab_id: {{records.tab_webhooks.id}}
      extension_id: core.workspace.widget.worklist
      pos@int: 3
      width_units@int: 4
      zone: content
      params:
        context: cerberusweb.contexts.webhook_listener
        query_required@text:
        query: sort:name
        render_limit: 10
        header_color: #6a87db
        columns@list:
          w_name
          w_guid
          w_updated_at
  workspace_tab/tab_workflows:
    fields:
      name: Workflows
      page_id: {{records.page_tutorial.id}}
      extension_id: core.workspace.tab.dashboard
      pos@int: 27
      params:
        layout@text:
        prompts_kata@text:
      options_kata@raw: locked@bool: yes
  workspace_widget/widget_workflows:
    fields:
      label: Workflows
      tab_id: {{records.tab_workflows.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 1
      width_units@int: 2
      zone: content
      params:
        data_query@text:
          type:sample.records
          records:(example:())
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@text:
          layout:
            style: fieldsets
            headings@bool: no
            paging@bool: no
            filtering@bool: no

          columns:
            markdown/instructions:
              params:
                text_size@raw: 120%
                value@raw:
                  [**Workflows**](https://cerb.ai/docs/workflows/) are templates with versioned updates that keep a related set of records in sync between multiple environments (e.g. dev, staging, production).

                  Here's a simple workflow KATA template that creates a new task using a configurable name and owner.

                  ```kata
                  config:
                    text/taskName:
                      label: Task name:
                      default: New task from a workflow
                    chooser/taskOwner:
                      label: Task owner:
                      multiple@bool: no
                      record_type: worker
                      record_query: isDisabled:n

                  records:
                    task/newTask:
                      deletionPolicy: retain
                      fields:
                        owner_id: $${"$${config.taskOwner_id|default(0)}"}
                        title: $${"$${config.taskName}"}
                  ```

                  When you make a changes to a workflow template, any records that were previously created by the workflow are automatically updated to match. The workflow manages the mapping between template "keys" and local record IDs.

                  See:
                  * [Workflow Library](https://cerb.ai/resources/workflows/)
        toolbar_kata@text:
  workspace_widget/widget_placeholders:
    fields:
      label: Placeholders
      tab_id: {{records.tab_workflows.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 2
      width_units@int: 2
      zone: content
      params:
        data_query@text:
          type:sample.records
          records:(example:())
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@raw:
          layout:
            style: fieldsets
            headings@bool: no
            paging@bool: no
            filtering@bool: no

          columns:
            markdown/instructions:
              params:
                text_size@raw: 120%
                value@raw:
                  To avoid conflicts with the usual `{{placeholder}}` syntax found in records like automations and snippets, Workflow KATA uses a special syntax for its own placeholders.

                  From any feature that supports automation scripting (e.g. automations, workflows, snippets) you can use `{{cerb_workflow_config('workflow_name')}}` to dynamically read workflow configuration values at runtime. For instance, you can create a workflow just for sharing values (e.g. API keys) between multiple workflows.

                  You can read a single key with a default value using: `{{cerb_workflow_config('workflow_name','hashSecret','default')}}`

                  You can also statically replace configuration values in the template with: `$${"$${config.keyName}"}`

                  If the configuration value is a `chooser:`, you can expand its dictionary keys like: `$${"$${config.keyName__label}"}`

                  Workflow placeholders also support automation scripting [filters](https://cerb.ai/docs/scripting/filters/), such as: `$${"$${config.keyName|lower|sha1}"}`

        toolbar_kata@text:
  workspace_widget/widget_list_of_workflows:
    fields:
      label: List of Workflows
      tab_id: {{records.tab_workflows.id}}
      extension_id: core.workspace.widget.worklist
      pos@int: 3
      width_units@int: 4
      zone: content
      params:
        context: cerb.contexts.workflow
        query_required@text:
        query: sort:name
        render_limit: 10
        header_color: #6a87db
        columns@list:
          a_name
          a_description
          a_updated_at
  workspace_tab/tab_packages:
    fields:
      name: Packages
      page_id: {{records.page_tutorial.id}}
      extension_id: core.workspace.tab.dashboard
      pos@int: 28
      params:
        layout@text:
        prompts_kata@text:
      options_kata@raw: locked@bool: yes
  workspace_widget/widget_packages:
    fields:
      label: Packages
      tab_id: {{records.tab_packages.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 1
      width_units@int: 2
      zone: content
      params:
        data_query@text:
          type:sample.records
          records:(example:())
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@raw:
          layout:
            style: fieldsets
            headings@bool: no
            paging@bool: no
            filtering@bool: no

          columns:
            markdown/instructions:
              params:
                text_size@raw: 120%
                value@text:
                  [**Packages**](https://cerb.ai/docs/packages/) are a blueprint for importing a related set of pre-configured **records** into Cerb.

                  A single package can contain any number of workspaces, dashboards, bots, project boards, custom records, custom fieldsets, tasks, tickets, contacts, etc.

                  Packages use the JSON file format. This is something you can easily create from any text editor, and read/write in nearly any programming language.

                  ```json
                  {
                    "package": {
                      "name": "Example Package",
                      "configure": {
                        "placeholders": [
                          {
                            "type": "random",
                            "key": "random_code",
                            "params": {
                              "length": "8"
                            }
                          }
                        ]
                      }
                    },
                    "records": [
                      {
                        "uid": "task_001",
                        "_context": "task",
                        "title": "Random task #{{{random_code}}}"
                      }
                    ]
                  }
                  ```

                  See:
                  * [Building packages](https://cerb.ai/guides/packages/building/)
                  * [Create a reusable set of related records in a single package](https://cerb.ai/guides/packages/create-records/)
                  * [Importing packages](https://cerb.ai/guides/packages/importing/)
        toolbar_kata@text:
  workspace_widget/widget_packages_library:
    fields:
      label: Library
      tab_id: {{records.tab_packages.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 2
      width_units@int: 2
      zone: content
      params:
        data_query@text:
          type:sample.records
          records:(help:())
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@text:
          layout:
            style: fieldsets
            headings@bool: no
            paging@bool: no
            filtering@bool: no

          columns:
            markdown/text:
              params:
                text_size@raw: 120%
                value@text:
                  Pre-approved packages can be added to the **library** as templates for use by workers when creating new records.

                  The `package.library` key uses the following structure:

                  ```json
                  {
                    "package": {
                      "library": {
                        "name": "Package Name",
                        "uri": "a_unique_package_identifier",
                        "description": "A description of your package",
                        "instructions": "Instructions with **Markdown** formatting.",
                        "point": "an_extension_point",
                        "image": "data:image/png;base64,..."
                      }
                    }
                  }
                  ```

                  See:
                  * [Adding packages to the library](https://cerb.ai/guides/packages/building/#package-library)
        toolbar_kata@text:
  workspace_widget/widget_list_of_packages_library:
    fields:
      label: List of Library Packages
      tab_id: {{records.tab_packages.id}}
      extension_id: core.workspace.widget.worklist
      pos@int: 3
      width_units@int: 4
      zone: content
      params:
        context: cerberusweb.contexts.package.library
        query_required@text:
        query: sort:name
        render_limit: 10
        header_color: #6a87db
        columns@list:
          p_name
          p_description
          p_point
          p_updated_at
  workspace_tab/tab_api:
    fields:
      name: API
      page_id: {{records.page_tutorial.id}}
      extension_id: core.workspace.tab.dashboard
      pos@int: 29
      params:
        layout@text:
        prompts_kata@text:
      options_kata@raw: locked@bool: yes
  workspace_widget/widget_api:
    fields:
      label: API
      tab_id: {{records.tab_api.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 1
      width_units@int: 4
      zone: content
      params:
        data_query@text:
          type:sample.records
          records:(help:())
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@text:
          layout:
            style: fieldsets
            headings@bool: no
            paging@bool: no
            filtering@bool: no

          columns:
            markdown/instructions:
              params:
                #image@bool: yes
                #bold@bool: yes
                value_template@raw:
                  The [**API**](https://cerb.ai/docs/api/) is a REST-based web endpoint that allows external applications to interact with Cerb for automation, synchronization, and integration. Through the API, you can perform tasks like creating tickets, searching records, managing notifications, and running automations. It supports data formats such as JSON or XML, and uses OAuth 2.0 for authentication.

                  ```python
                  import requests

                  # Define the API endpoint and ticket ID
                  cerb_base_url = "https://YOUR-CERB-HOST"
                  ticket_id = 123  # Example ticket ID
                  url = f"{cerb_base_url}/rest/records/ticket/{ticket_id}.json"

                  # OAuth token (replace with your actual token)
                  access_token = "YOUR_ACCESS_TOKEN"

                  # Set up headers with the OAuth token
                  headers = {
                      "Authorization": f"Bearer {access_token}"
                  }

                  # Make the GET request to retrieve the ticket
                  response = requests.get(url, headers=headers)

                  # Check if the request was successful
                  if response.status_code == 200:
                      ticket_data = response.json()
                      print("Ticket Data:", ticket_data)
                  else:
                      print(f"Failed to retrieve ticket. Status code: {response.status_code}")
                      print("Response:", response.text)
                  ```
        toolbar_kata@text:
  workspace_widget/widget_oauth_apps:
    fields:
      label: OAuth Apps
      tab_id: {{records.tab_api.id}}
      extension_id: core.workspace.widget.sheet
      pos@int: 2
      width_units@int: 2
      zone: content
      params:
        data_query@text:
          type:sample.records
          records:(help:())
          format:dictionaries
        cache_secs@text:
        placeholder_simulator_kata@text:
        sheet_kata@text:
          layout:
            style: fieldsets
            headings@bool: no
            paging@bool: no
            filtering@bool: no

          columns:
            markdown/instructions:
              params:
                #image@bool: yes
                #bold@bool: yes
                value_template@raw:
                  An OAuth app is a configuration that allows external applications to interact with Cerb's API using OAuth 2.0 authentication. OAuth 2.0 is an industry standard that enables third-party services to securely access resources on behalf of a user without sharing credentials like passwords.

                  To create an OAuth app in Cerb, an administrator configures the following details:
                  1. **Name**: The name of the external application or integration.
                  2. **Callback URL**: Also called the "Redirect URL," this is the endpoint in the external application that receives OAuth responses.
                  3. **Website**: The URL of the external application (optional).
                  4. **Scopes**: A set of permissions that define what the application can do on behalf of the user (e.g., read-only access, full API access).

                  Once the OAuth app is created, Cerb generates a **Client ID** and **Client Secret**, which the external app uses to authenticate and request a short-lived **access token** from Cerb. This token is then used in the `Authorization: Bearer <token>` HTTP header of subsequent API requests.

                  A **refresh token** is used to receive a new short-lived access token without repeating the authentication and linking steps.

                  Access tokens can be generated manually from **Setup > Developers > OAuth2 Token Generator**.
        toolbar_kata@text:
  workspace_widget/widget_list_of_oauth_apps:
    fields:
      label: List of OAuth Apps
      tab_id: {{records.tab_api.id}}
      extension_id: core.workspace.widget.worklist
      pos@int: 3
      width_units@int: 2
      zone: content
      params:
        context: cerberusweb.contexts.oauth.app
        query_required@text:
        query: sort:name
        render_limit: 5
        header_color: #6a87db
        columns@list:
          o_name
          o_client_id
          o_access_token_ttl
          o_refresh_token_ttl
  automation/tutorial_pgp:
    fields:
      name: ai.cerb.tutorial.pgp
      extension_id: cerb.trigger.interaction.internal
      description@text:
      script@raw:
        inputs:
          text/mode:
            type: freeform

        start:
          decision/mode:
            outcome/decrypt:
              if@bool: {{'decrypt' == inputs.mode}}
              then:
                await:
                  form:
                    title: Decrypt message
                    elements:
                      textarea/prompt_message:
                        label: Encrypted message:
                        required@bool: yes

                decrypt.pgp:
                  output: decrypted_message
                  inputs:
                    message@key: prompt_message

                await/output:
                  form:
                    elements:
                      say:
                        content@text:
                          ~~~
                          {{decrypted_message.data}}
                          ~~~

            outcome/encrypt:
              then:
                await:
                  form:
                    title: Encrypt message
                    elements:
                      textarea/prompt_message:
                        label: Message:
                        required@bool: yes
                      sheet/prompt_recipient_keys:
                        label: Recipient public keys:
                        required@bool: yes
                        data:
                          automation:
                            uri: cerb:automation:cerb.data.records
                            inputs:
                              record_type: gpg_public_key
                              #query_required@text:
                        limit: 10
                        schema:
                          layout:
                            headings@bool: no
                            paging@bool: yes
                            filtering@bool: yes
                          columns:
                            selection/id:
                              params:
                                mode: multiple
                            card/_label:
                              params:
                                bold@bool: yes
                                #image@bool: yes

                encrypt.pgp:
                  output: encrypted_message
                  inputs:
                    message@key: prompt_message
                    public_keys:
                      ids@key: prompt_recipient_keys

                await/output:
                  form:
                    elements:
                      say:
                        content@text:
                          ~~~
                          {{encrypted_message}}
                          ~~~

                return:
                  snippet@key: encrypted_message
      policy_kata@raw:
        commands:
          decrypt.pgp:
            allow@bool: yes
          encrypt.pgp:
            allow@bool: yes
  automation/tutorial_interaction:
    fields:
      name: ai.cerb.tutorial.interactions.formElements
      description: Demonstration of all interaction.worker form element types for the tutorial
      extension_id: cerb.trigger.interaction.internal
      script@raw:
        inputs:
          text/element:
            required@bool: yes

        start:
          decision/element:
            outcome/audio:
              if: {{'audio' == inputs.element}}
              then:
                await:
                  form:
                    title: Audio
                    elements:
                      audio/prompt_audio:
                        label: Play audio:
                        autoplay@bool: yes
                        controls@bool: yes
                        source:
                          blob: data:audio/mpeg;base64,
                      editor/code:
                        label: Syntax:
                        syntax: kata
                        readonly@bool: yes
                        default@raw:
                          start:
                            await:
                              form:
                                title: Audio
                                elements:
                                  audio/prompt_audio:
                                    label: Play audio:
                                    autoplay@bool: yes
                                    controls@bool: yes
                                    source:
                                      blob: data:audio/mpeg;base64,...
                                      #uri: cerb:resource:...
            outcome/chart:
              if: {{'chart' == inputs.element}}
              then:
                await:
                  form:
                    title: Chart
                    elements:
                      chart/prompt_chart:
                        label: Tickets by group (past 1 year):
                        datasets:
                          dataQuery/tickets:
                            query@text:
                              type:worklist.subtotals
                              of:ticket
                              by:[created@month,group~20]
                              query:(created:"-1 year to now")
                              format:timeseries
                        schema:
                          data:
                            type: bar
                            series:
                              tickets:
                                x_key: ts
                            stacks:
                              0@csv: tickets
                          axis:
                            x:
                              type: timeseries
                              tick:
                                format:
                                  date:
                                    pattern: %b %Y
                                fit@bool: no
                                multiline@bool: no
                                rotate: -90
                      editor/code:
                        label: Syntax:
                        syntax: kata
                        readonly@bool: yes
                        default@raw:
                          start:
                            await:
                              form:
                                title: Chart
                                elements:
                                  chart/prompt_chart:
                                    label: Tickets by group (past 1 year):
                                    datasets:
                                      dataQuery/tickets:
                                        query@text:
                                          type:worklist.subtotals
                                          of:ticket
                                          by:[created@month,group~20]
                                          query:(created:"-1 year to now")
                                          format:timeseries
                                    schema:
                                      data:
                                        type: bar
                                        series:
                                          tickets:
                                            x_key: ts
                                        stacks:
                                          0@csv: tickets
                                      axis:
                                        x:
                                          type: timeseries
                                          tick:
                                            format:
                                              date:
                                                pattern: %b %Y
                                            fit@bool: no
                                            multiline@bool: no
                                            rotate: -90
            outcome/chooser:
              if: {{'chooser' == inputs.element}}
              then:
                await:
                  form:
                    title: Chooser
                    elements:
                      chooser/prompt_chooser:
                        label: Choose records:
                        record_type: worker
                        query@text: isDisabled:n
                        multiple@bool: yes
                        required@bool: yes
                      editor/code:
                        label: Syntax:
                        syntax: kata
                        readonly@bool: yes
                        default@raw:
                          start:
                            await:
                              form:
                                title: Chooser
                                elements:
                                  chooser/prompt_chooser:
                                    label: Choose records:
                                    record_type: worker
                                    query@text: isDisabled:n
                                    multiple@bool: yes
                                    required@bool: yes
                            await/response:
                              form:
                                elements:
                                  say:
                                    content@text:
                                      You selected record IDs: {{prompt_chooser|join(', ')}}
                await/response:
                  form:
                    elements:
                      say:
                        content@text:
                          You selected record IDs: {{prompt_chooser|join(', ')}}
            outcome/editor:
              if: {{'editor' == inputs.element}}
              then:
                await:
                  form:
                    title: Editor
                    elements:
                      editor/prompt_editor:
                        label: Code editor:
                        line_numbers@bool: yes
                        readonly@bool: no
                        syntax: json
                        default@text: {{cerb_current_worker()|json_encode|json_pretty}}
                      editor/code:
                        label: Syntax:
                        syntax: kata
                        readonly@bool: yes
                        default@raw:
                          start:
                            await:
                              form:
                                title: Editor
                                elements:
                                  editor/prompt_editor:
                                    label: Code editor:
                                    line_numbers@bool: yes
                                    readonly@bool: no
                                    syntax: json
                                    default@text: {{cerb_current_worker()|json_encode|json_pretty}}
            outcome/fileDownload:
              if: {{'fileDownload' == inputs.element}}
              then:
                file.write:
                  output: new_file
                  inputs:
                    name: worker.json
                    mime_type: application/json
                    content: {{cerb_current_worker()|json_encode|json_pretty}}
                await:
                  form:
                    title: File Download
                    elements:
                      fileDownload/prompt_file:
                        label: Download:
                        filename: worker.json
                        uri: {{new_file.uri}}
                        #data@text: {{cerb_current_worker()|json_encode|json_pretty}}
                      editor/code:
                        label: Syntax:
                        syntax: kata
                        readonly@bool: yes
                        default@raw:
                          start:
                            file.write:
                              output: new_file
                              inputs:
                                name: worker.json
                                mime_type: application/json
                                content: {{cerb_current_worker()|json_encode|json_pretty}}
                            await:
                              form:
                                title: File Download
                                elements:
                                  fileDownload/prompt_file:
                                    label: Download:
                                    filename: worker.json
                                    uri: {{new_file.uri}}
            outcome/fileUpload:
              if: {{'fileUpload' == inputs.element}}
              then:
                await:
                  form:
                    title: File Upload
                    elements:
                      fileUpload/prompt_file:
                        label: Upload a .PNG image file smaller than 1MB:
                        as: attachment
                        required@bool: yes
                        validation@raw:
                          {% if prompt_file_mime_type != 'image/png' %}
                          The file must be a PNG image ({{prompt_file_mime_type}})
                          {% elseif prompt_file_size > 1024000 %}
                          The file ({{prompt_file_size|bytes_pretty}}) must be smaller than 1MB.
                          {% endif %}
                      editor/code:
                        label: Syntax:
                        syntax: kata
                        readonly@bool: yes
                        default@raw:
                          start:
                            await:
                              form:
                                title: File Upload
                                elements:
                                  fileUpload/prompt_file:
                                    label: Upload a .PNG image file smaller than 1MB:
                                    as: attachment
                                    required@bool: yes
                                    validation@raw:
                                      {% if prompt_file_mime_type != 'image/png' %}
                                      The file must be a PNG image ({{prompt_file_mime_type}})
                                      {% elseif prompt_file_size > 1024000 %}
                                      The file ({{prompt_file_size|bytes_pretty}}) must be smaller than 1MB.
                                      {% endif %}
            outcome/map:
              if: {{'map' == inputs.element}}
              then:
                await:
                  form:
                    title: Map
                    elements:
                      map/prompt_map:
                        projection:
                          type: mercator
                          center:
                            latitude: 52.6551
                            longitude: 15.4655
                          scale: 350
                        points:
                          size:
                            default: 5
                          data:
                            point/berlin:
                              latitude: 52.549636074382285
                              longitude: 13.403320312499998
                              properties:
                                name: Berlin
                                country: Germany
                                continent: Europe
                      editor/code:
                        label: Syntax:
                        syntax: kata
                        readonly@bool: yes
                        default@raw:
                          start:
                            await:
                              form:
                                title: Map
                                elements:
                                  map/prompt_map:
                                    projection:
                                      type: mercator
                                      center:
                                        latitude: 52.6551
                                        longitude: 15.4655
                                      scale: 350
                                    points:
                                      size:
                                        default: 5
                                      data:
                                        point/berlin:
                                          latitude: 52.549636074382285
                                          longitude: 13.403320312499998
                                          properties:
                                            name: Berlin
                                            country: Germany
                                            continent: Europe
            outcome/query:
              if: {{'query' == inputs.element}}
              then:
                await:
                  form:
                    title: Query
                    elements:
                      query/prompt_query:
                        label: Query:
                        record_type: ticket
                        default@text:
                          status:o
                      editor/code:
                        label: Syntax:
                        syntax: kata
                        readonly@bool: yes
                        default@raw:
                          start:
                            await:
                              form:
                                title: Query
                                elements:
                                  query/prompt_query:
                                    label: Query:
                                    record_type: ticket
                                    default@text:
                                      status:o
            outcome/say:
              if: {{'say' == inputs.element}}
              then:
                await:
                  form:
                    title: Say
                    elements:
                      say/hello:
                        content@text:
                          # Heading
                          This is a **paragraph** in Markdown.
                      editor/code:
                        label: Syntax:
                        syntax: kata
                        readonly@bool: yes
                        default@raw:
                          start:
                            await:
                              form:
                                title: Say
                                elements:
                                  say/hello:
                                    content@text:
                                      # Heading
                                      This is a **paragraph** in Markdown.
            outcome/sheet:
              if: {{'sheet' == inputs.element}}
              then:
                await/example1:
                  form:
                    title: Sheet
                    elements:
                      say:
                        content@text: # Single selection with hard-coded data
                      sheet/prompt_choice:
                        label: Make a selection:
                        required@bool: yes
                        data:
                          0:
                            key: option1
                            name: Option 1
                            description: This is a description of option one.
                          1:
                            key: option2
                            name: Option 2
                            description: This is a description of option two.
                        limit: 5
                        default: option1
                        schema:
                          layout:
                            headings@bool: no
                            paging@bool: no
                            filtering@bool: no
                            #title_column: key
                          columns:
                            selection/key:
                              params:
                                mode: single
                            text/name:
                              params:
                                bold@bool: yes
                            text/description:
                      editor/code:
                        label: Syntax:
                        syntax: kata
                        readonly@bool: yes
                        default@raw:
                          start:
                            await:
                              form:
                                title: Sheet
                                elements:
                                  sheet/prompt_choice:
                                    label: Make a selection:
                                    required@bool: yes
                                    data:
                                      0:
                                        key: option1
                                        name: Option 1
                                        description: This is a description of option one.
                                      1:
                                        key: option2
                                        name: Option 2
                                        description: This is a description of option two.
                                    limit: 5
                                    default: option1
                                    schema:
                                      layout:
                                        headings@bool: no
                                        paging@bool: no
                                        filtering@bool: no
                                        #title_column: key
                                      columns:
                                        selection/key:
                                          params:
                                            mode: single
                                        text/name:
                                          params:
                                            bold@bool: yes
                                        text/description:
                      submit:
                        buttons:
                          continue/yes:
                            label: Next example
                            icon: circle-arrow-right
                            icon_at: end
                await/example2:
                  form:
                    title: Sheet
                    elements:
                      say:
                        content@text: # Multiple selection with automation-provided data
                      sheet/prompt_choice:
                        label: Choose multiple workers:
                        required@bool: yes
                        data:
                          automation:
                            uri: cerb:automation:cerb.data.records
                            inputs:
                              record_type: worker
                              query_required@text: isDisabled:n
                        limit: 5
                        schema:
                          layout:
                            headings@bool: no
                            paging@bool: yes
                            filtering@bool: yes
                            #title_column: key
                          columns:
                            selection/id:
                              params:
                                mode: multiple
                            card/_label:
                              params:
                                bold@bool: yes
                                image@bool: yes
                            text/title:
                      editor/code:
                        label: Syntax:
                        syntax: kata
                        readonly@bool: yes
                        default@raw:
                          start:
                            await:
                              form:
                                title: Sheet
                                elements:
                                  sheet/prompt_choice:
                                    label: Choose multiple workers:
                                    required@bool: yes
                                    data:
                                      automation:
                                        uri: cerb:automation:cerb.data.records
                                        inputs:
                                          record_type: worker
                                          query_required@text: isDisabled:n
                                    limit: 5
                                    schema:
                                      layout:
                                        headings@bool: no
                                        paging@bool: yes
                                        filtering@bool: yes
                                        #title_column: key
                                      columns:
                                        selection/id:
                                          params:
                                            mode: multiple
                                        card/_label:
                                          params:
                                            bold@bool: yes
                                            image@bool: yes
                                        text/title:
                      submit:
                        buttons:
                          continue:
                            label: Done
                            icon: circle-ok
                            icon_at: start
                          reset:
                            label: Start over
                            icon: refresh
                            icon_at: start
                            style: secondary
            outcome/submit:
              if: {{'submit' == inputs.element}}
              then:
                await:
                  form:
                    title: Submit
                    elements:
                      submit/prompt_confirm:
                        buttons:
                          continue/yes:
                            label: Yes
                            value: yes
                          continue/no:
                            label: No
                            style: secondary
                            value: no
                      editor/code:
                        label: Syntax:
                        syntax: kata
                        readonly@bool: yes
                        default@raw:
                          start:
                            await:
                              form:
                                title: Submit
                                elements:
                                  submit/prompt_confirm:
                                    buttons:
                                      continue/yes:
                                        label: Yes
                                        value: yes
                                      continue/no:
                                        label: No
                                        style: secondary
                                        value: no
            outcome/text:
              if: {{'text' == inputs.element}}
              then:
                await/example1:
                  form:
                    title: Text
                    elements:
                      text/prompt_name:
                        label: Name:
                        required@bool: yes
                        type: freeform
                        default: Kina Halpue
                      text/prompt_email:
                        label: Email:
                        required@bool: yes
                        type: email
                        placeholder: you@example.com
                        default: kina@cerb.example
                      text/prompt_website:
                        label: Website:
                        required@bool: yes
                        type: url
                        placeholder: https://website.example
                        default: https://cerb.ai
                      editor/code:
                        label: Syntax:
                        syntax: kata
                        readonly@bool: yes
                        default@raw:
                          start:
                            await:
                              form:
                                title: Text
                                elements:
                                  text/prompt_name:
                                    label: Name:
                                    required@bool: yes
                                    type: freeform
                                    default: Kina Halpue
                                  text/prompt_email:
                                    label: Email:
                                    required@bool: yes
                                    type: email
                                    placeholder: you@example.com
                                    default: kina@cerb.example
                                  text/prompt_website:
                                    label: Website:
                                    required@bool: yes
                                    type: url
                                    placeholder: https://website.example
                                    default: https://cerb.ai
                      submit:
                        buttons:
                          continue/yes:
                            label: Next: Text with custom validation
                            icon: circle-arrow-right
                            icon_at: end
                await/example2:
                  form:
                    title: Text
                    elements:
                      text/prompt_text:
                        label: Text with custom validation:
                        required@bool: yes
                        type: freeform
                        placeholder: (enter a name between 8-32 characters)
                        validation@raw:
                          {% if prompt_text is empty %}
                          A name is required.
                          {% elseif prompt_text|length < 8 %}
                          A name must be 8 or more characters.
                          {% elseif prompt_text|length > 32 %}
                          A name must be less than 32 characters.
                          {% endif %}
                      editor/code:
                        label: Syntax:
                        syntax: kata
                        readonly@bool: yes
                        default@raw:
                          start:
                            await:
                              form:
                                title: Text
                                elements:
                                  text/prompt_text:
                                    label: Text with custom validation:
                                    required@bool: yes
                                    type: freeform
                                    placeholder: (enter a name between 8-32 characters)
                                    validation@raw:
                                      {% if prompt_text is empty %}
                                      A name is required.
                                      {% elseif prompt_text|length < 8 %}
                                      A name must be 8 or more characters.
                                      {% elseif prompt_text|length > 32 %}
                                      A name must be less than 32 characters.
                                      {% endif %}
                      submit:
                        buttons:
                          continue:
                            label: Next: Text-based data types
                            icon: circle-arrow-right
                            icon_at: end
                await/types:
                  form:
                    elements:
                      say:
                        content@text:
                          # Text Validation Types

                          `text:` prompts can validate as the following types:

                          |Type|Examples
                          |:-|:-
                          |**bool**| `true`, `false`
                          |**date**| `tomorrow 8am`, `next Friday`, `31 Dec 2025 noon`
                          |**decimal**| `3.1415`
                          |**email**| `mailbox@host`
                          |**freeform**| `An arbitrary string of text`
                          |**geopoint**| `52.5246, 13.4033` (latitude, longitude)
                          |**ip**| `1.2.3.4`, `1234:5678:90ab:cdef:1234:5678:90ab:cdef`
                          |**ipv4**| `1.2.3.4`
                          |**ipv6**| `1234:5678:90ab:cdef:1234:5678:90ab:cdef`
                          |**number**| `12345`
                          |**record_type**| `task`, `ticket`, `worker`
                          |**timestamp**| `1606955026`
                          |**uri**| `some-unique-identifier` (letters, numbers, dots, dashes)
                          |**url**| `https://example.com/`
                      submit:
                        buttons:
                          continue:
                            label: Done
                            icon: circle-ok
                            icon_at: start
                          reset:
                            label: Start over
                            icon: refresh
                            icon_at: start
                            style: secondary
            outcome/textarea:
              if: {{'textarea' == inputs.element}}
              then:
                await:
                  form:
                    title: Textarea
                    elements:
                      textarea/prompt_comment:
                        label: Please share your experience:
                        required@bool: yes
                        validation@raw:
                          {% if prompt_comment|length < 100 %}
                          A comment must be at least 100 characters.
                          {% endif %}
                      editor/code:
                        label: Syntax:
                        syntax: kata
                        readonly@bool: yes
                        default@raw:
                          start:
                            await:
                              form:
                                title: Textarea
                                elements:
                                  textarea/prompt_comment:
                                    label: Please share your experience:
                                    required@bool: yes
                                    validation@raw:
                                      {% if prompt_comment|length < 100 %}
                                      A comment must be at least 100 characters.
                                      {% endif %}
      policy_kata@raw:
        commands:
          file.write:
            allow@bool: yes
  automation/tutorial_interaction_return:
    fields:
      name: ai.cerb.tutorial.interactions.return
      extension_id: cerb.trigger.interaction.internal
      description: Demonstration of all interaction.worker return commands for the tutorial
      script@raw:
        inputs:
          text/command:
            required@bool: yes

        start:
          decision/command:
            outcome/alert:
              if: {{'alert' == inputs.command}}
              then:
                await:
                  form:
                    title: Alert
                    elements:
                      editor/code:
                        label: Syntax:
                        syntax: kata
                        readonly@bool: yes
                        default@raw:
                          start:
                            return:
                              alert: This is an alert.
                return:
                  alert: This is an alert.
            outcome/clipboard:
              if: {{'clipboard' == inputs.command}}
              then:
                await:
                  form:
                    title: Clipboard
                    elements:
                      sheet:
                        data:
                          copy:
                        limit: 5
                        schema:
                        toolbar:
                          interaction/copy:
                            label: Copy
                            icon: copy
                            uri: cerb:automation:cerb.interaction.echo
                            inputs:
                              outputs:
                                clipboard: This text was copied to your clipboard.
                                alert: Copied to your clipboard!
                      editor/code:
                        label: Syntax:
                        syntax: kata
                        readonly@bool: yes
                        default@raw:
                          start:
                            return:
                              clipboard: This text was copied to your clipboard.
                              alert: Copied to your clipboard!
            outcome/callout:
              if: {{'callout' == inputs.command}}
              then:
                await:
                  form:
                    title: Callout
                    elements:
                      editor/code:
                        label: Syntax:
                        syntax: kata
                        readonly@bool: yes
                        default@raw:
                          start:
                            return:
                              callout:
                                selector: #cerb-logo
                                my: left top
                                at: middle bottom
                                message: This is the logo.
                return:
                  callout:
                    selector: #cerb-logo
                    my: left top
                    at: middle bottom
                    message: This is the logo.
            outcome/open_link:
              if: {{'open_link' == inputs.command}}
              then:
                await:
                  form:
                    title: Open Link
                    elements:
                      editor/code:
                        label: Syntax:
                        syntax: kata
                        readonly@bool: yes
                        default@raw:
                          start:
                            return:
                              open_link: https://cerb.ai/
                return:
                  open_link: https://cerb.ai/
            outcome/open_url:
              if: {{'open_url' == inputs.command}}
              then:
                await:
                  form:
                    title: Open URL
                    elements:
                      editor/code:
                        label: Syntax:
                        syntax: kata
                        readonly@bool: yes
                        default@raw:
                          start:
                            return:
                              open_url: https://cerb.ai/
                return:
                  open_url: https://cerb.ai/
            outcome/snippet:
              if: {{'snippet' == inputs.command}}
              then:
                await:
                  form:
                    title: Snippet
                    elements:
                      editor/example:
                        label: Example code editor:
                        syntax: text
                        toolbar:
                          interaction/paste:
                            label: Paste
                            icon: paste
                            uri: cerb:automation:cerb.interaction.echo
                            inputs:
                              outputs:
                                snippet: This text was pasted from an interaction.
                      editor/code:
                        label: Syntax:
                        syntax: kata
                        readonly@bool: yes
                        default@raw:
                          start:
                            return:
                              snippet: This text was pasted from an interaction.
            outcome/timer:
              if: {{'timer' == inputs.command}}
              then:
                await:
                  form:
                    title: Timer
                    elements:
                      editor/code:
                        label: Syntax:
                        syntax: kata
                        readonly@bool: yes
                        default@raw:
                          start:
                            record.create/timer:
                              output: new_time_entry
                              inputs:
                                record_type: time_entry
                                fields:
                                  log_date@date: now
                                  secs: 0
                                  worker_id@int: {{worker_id}}
                            return:
                              timer: {{new_time_entry.id}}
      policy_kata@raw:
        commands:
          # [TODO] Specify a command policy here (use Ctrl+Space for autocompletion)
  automation/tutorial_dataqueries:
    fields:
      name: ai.cerb.tutorial.dataQueries
      extension_id: cerb.trigger.interaction.internal
      description@text:
      script@raw:
        start:
          data.query/createdByGroup:
            output: results
            inputs:
              query@text:
                type:worklist.subtotals
                of:ticket
                by:[created@day,group~20]
                query:(created:"-2 weeks")
                format:timeseries
          await:
            form:
              title: Data Query
              elements:
                editor/syntax:
                  label: Syntax:
                  syntax: cerb_query_data
                  readonly@bool: yes
                  default@text:
                    type:worklist.subtotals
                    of:ticket
                    by:[created@day,group~20]
                    query:(created:"-2 weeks")
                    format:timeseries
                editor/results:
                  label: Results:
                  syntax: json
                  default: {{results.data|json_encode|json_pretty}}
                  readonly@bool: yes
                chart/prompt_chart:
                  label: Visualization:
                  datasets:
                    dataQuery/series0:
                      query@text:
                        type:worklist.subtotals
                        of:ticket
                        by:[created@day,group~20]
                        query:(created:"-2 weeks")
                        format:timeseries
                  schema:
                    data:
                      type: bar
                      stacks:
                        0@csv: series0
                      series:
                        series0:
                          x_key: ts
                    axis:
                      x:
                        type: timeseries
                        tick:
                          multiline@bool: no
                          rotate: -60
                          format:
                            date:
                              pattern: %Y-%m-%d
      policy_kata@raw:
        commands:
          data.query:
            deny/type@bool: {{query.type != 'worklist.subtotals'}}
            allow@bool: yes
